<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-03-16T15:27:42+05:00</updated><id>/feed.xml</id><title type="html">Curifense</title><entry><title type="html">Curiefense GA (1.3.0) Released</title><link href="/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more" rel="alternate" type="text/html" title="Curiefense GA (1.3.0) Released" /><published>2021-03-02T00:00:00+05:00</published><updated>2021-03-02T00:00:00+05:00</updated><id>/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more</id><content type="html" xml:base="/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more">&lt;p&gt;
    Curiefense is now in GA! üéâ The &lt;a href=&quot;https://docs.curiefense.io/v/1.3.0/installation/getting-started-with-curiefense&quot;&gt;latest version&lt;/a&gt; (1.3.0) is now available for deployment. A lot has happened since the initial release of v1.0
    in November, and not just in &lt;a href=&quot;https://docs.curiefense.io/v/1.3.0/reference/release-notes&quot;&gt;our changelog&lt;/a&gt;. Here are some of the highlights.
&lt;/p&gt;
&lt;h3&gt;Joining the Open Source and Cloud Native Communities&lt;/h3&gt;
&lt;p&gt;
    Curiefense is now a &lt;a href=&quot;https://www.curiefense.io/post/now-a-cncf-sandbox-project&quot;&gt;CNCF Sandbox Project&lt;/a&gt;, and we‚Äôre already making substantial progress in conforming the project to CNCF standards.&amp;nbsp;
    &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
    The project has &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/en/projects/4576&quot;&gt;earned the CII Best Practices Badge&lt;/a&gt; from the Linux Foundation.
    &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
    We have launched a podcast: ‚Äú &lt;a href=&quot;https://ctcn.fireside.fm/1&quot;&gt;Committing to Cloud Native&lt;/a&gt;.‚Äù Along with discussing news and current events in the community, we‚Äôll be documenting our journey as we integrate Curiefense into the
    cloud native ecosystem. Hopefully, the lessons we learn along the way can be useful to others who travel this path later.&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;h3&gt;New Interactive Learning Platform&lt;/h3&gt;
&lt;p&gt;
    Now you can try Curiefense without having to install anything. Our &lt;a href=&quot;https://www.katacoda.com/curiefense/scenarios/getting-started&quot;&gt;first scenario on Katacoda&lt;/a&gt; provides you with a live, remotely-accessible environment, and
    walks you through Curiefense‚Äôs initial deployment, management UI, and dashboards. More scenarios are on the way. Be sure to check out our short &lt;a href=&quot;https://www.youtube.com/watch?v=HkoDPW46a8I&quot;&gt;explainer video&lt;/a&gt;.
&lt;/p&gt;
&lt;h3&gt;Project Transparency and Community Participation&lt;/h3&gt;
&lt;p&gt;
    Curiefense has been an ‚Äúopen book‚Äù project from day one, and we‚Äôre continuing to make data even easier to access. Recently we have:
    &lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;
        Created a
        &lt;a href=&quot;https://app.databox.com/datawall/3ddf913b2db3bb4f53586ec27aaee63106008ba72&quot;&gt;GitHub Dashboard by Databox&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
        Added
        &lt;a href=&quot;https://curiefense.devstats.cncf.io/d/8/dashboards?orgId=1&amp;amp;from=now-7d&amp;amp;to=now-1h&amp;amp;refresh=15m&quot;&gt;activity reporting via CNCF DevStats&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
        Created multiple granular channels in the Curiefense Slack workspace, making it easier to follow and participate in specific parts in the project. Slack members can interact with project maintainers, and can also subscribe to our
        realtime GitHub repository feed.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    &lt;br /&gt;
&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot;&gt;
    &lt;div&gt;
        &lt;img src=&quot;https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d1f417e492c8d476094cf_8TxW2CC76Y5PPK724sbfuKUYj45-nKtkomQVjv0NG2n38a6ajhYrzbA_FNlDX5ud8BkafIweJ7uor_WF-dvSTDsDmmyWK3lXOK180j2rFOT3XaHK3MClYjtVrAARmPVMBMFrFt27.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; loading=&quot;auto&quot; /&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;
    &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
    To join the Curiefense workspace on Slack, just email &lt;a href=&quot;mailto:community@curiefense.io&quot;&gt;community@curiefense.io&lt;/a&gt; for an invite.
    &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
    To follow us elsewhere, Twitter ( &lt;a href=&quot;https://twitter.com/curiefense&quot;&gt;https://twitter.com/curiefense&lt;/a&gt;) is our most-used social media channel. If you prefer email, we also have a
    &lt;a href=&quot;http://eepurl.com/hnnmpj&quot;&gt;newsletter&lt;/a&gt;.&amp;nbsp;
&lt;/p&gt;
&lt;h2&gt;Fun Stuff&lt;/h2&gt;
&lt;p&gt;
    To celebrate our launch, we now have &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-wallpaper&quot;&gt;Curiefense wallpaper&lt;/a&gt; available for your
    &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-wallpaper&quot;&gt;desktop&lt;/a&gt; and/or &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-zoom-virtual-backgrounds&quot;&gt;Zoom&lt;/a&gt;. Stay tuned for shirts and stickers,
    coming soon!
&lt;/p&gt;
&lt;h2&gt;All Are Welcome!&lt;/h2&gt;
&lt;p&gt;
    Curiefense is maintained by &lt;a href=&quot;https://www.reblaze.com/&quot;&gt;Reblaze&lt;/a&gt;, which is making significant investments into its development. That being said, Curiefense is a CNCF project, and is vendor-neutral.&amp;nbsp;
    &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
    We ask anyone who is interested to join us (including competitors). Our goal is to provide the community with a robust cloud native security solution for Envoy Proxy, and all are welcome. The more we work together, the better it will be
    for everyone.
&lt;/p&gt;
&lt;h2&gt;Acknowledgments and Thanks&lt;/h2&gt;
&lt;p&gt;
    The Curiefense team would like to thank:&amp;nbsp;
    &lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://twitter.com/amye&quot;&gt;Amye Scavarda Perrin&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/cra&quot;&gt;Chris Aniszczyk&lt;/a&gt; at the CNCF with onboarding&lt;/li&gt;
    &lt;li&gt;
        Our advisors: &lt;a href=&quot;https://twitter.com/mattklein123&quot;&gt;Matt Klein&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ChrisUeland&quot;&gt;Chris Ueland&lt;/a&gt;, Chris Ferreira, James Bynoe, and the rest of
        &lt;a href=&quot;https://www.curiefense.io/about-us&quot;&gt;the team&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://twitter.com/g_uist&quot;&gt;Kerollany ‚ÄúGuist‚Äù&lt;/a&gt; for her awesome merch designs&lt;/li&gt;
    &lt;li&gt;
        Stephen and Emilia at O‚ÄôReilly for their help with
        &lt;a href=&quot;https://www.katacoda.com/curiefense&quot;&gt;our Katacoda scenarios&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Justin Dorfman</name></author><summary type="html">A lot has happened since the initial release of v1.0 in November, and not just in our changelog. Here are some of the highlights.</summary></entry><entry><title type="html">Curiefense GA (1.3.0) Released: Project joins CNCF Sandbox, launches new learning platform, and more</title><link href="/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-0" rel="alternate" type="text/html" title="Curiefense GA (1.3.0) Released: Project joins CNCF Sandbox, launches new learning platform, and more" /><published>2021-03-01T00:00:00+05:00</published><updated>2021-03-01T00:00:00+05:00</updated><id>/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-0</id><content type="html" xml:base="/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-0">&lt;p&gt;
    Curiefense is now in GA! üéâ The &lt;a href=&quot;https://docs.curiefense.io/v/1.3.0/installation/getting-started-with-curiefense&quot;&gt;latest version&lt;/a&gt; (1.3.0) is now available for deployment. A lot has happened since the initial release of v1.0
    in November, and not just in &lt;a href=&quot;https://docs.curiefense.io/v/1.3.0/reference/release-notes&quot;&gt;our changelog&lt;/a&gt;. Here are some of the highlights.
&lt;/p&gt;
&lt;h3&gt;Joining the Open Source and Cloud Native Communities&lt;/h3&gt;
&lt;p&gt;Curiefense is now a &lt;a href=&quot;https://www.curiefense.io/post/now-a-cncf-sandbox-project&quot;&gt;CNCF Sandbox Project&lt;/a&gt;, and we‚Äôre already making substantial progress in conforming the project to CNCF standards.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The project has &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/en/projects/4576&quot;&gt;earned the CII Best Practices Badge&lt;/a&gt; from the Linux Foundation.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    We have launched a podcast: ‚Äú&lt;a href=&quot;https://ctcn.fireside.fm/1&quot;&gt;Committing to Cloud Native&lt;/a&gt;.‚Äù Along with discussing news and current events in the community, we‚Äôll be documenting our journey as we integrate Curiefense into the
    cloud native ecosystem. Hopefully, the lessons we learn along the way can be useful to others who travel this path later.&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;h3&gt;New Interactive Learning Platform&lt;/h3&gt;
&lt;p&gt;
    Now you can try Curiefense without having to install anything. Our &lt;a href=&quot;https://www.katacoda.com/curiefense/scenarios/getting-started&quot;&gt;first scenario on Katacoda&lt;/a&gt; provides you with a live, remotely-accessible environment, and
    walks you through Curiefense‚Äôs initial deployment, management UI, and dashboards. More scenarios are on the way.
&lt;/p&gt;
&lt;h3&gt;Project Transparency and Community Participation&lt;/h3&gt;
&lt;p&gt;Curiefense has been an ‚Äúopen book‚Äù project from day one, and we‚Äôre continuing to make data even easier to access. Recently we have:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Created a &lt;a href=&quot;https://app.databox.com/datawall/3ddf913b2db3bb4f53586ec27aaee63106008ba72&quot;&gt;GitHub Dashboard by Databox&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://curiefense.devstats.cncf.io/d/8/dashboards?orgId=1&amp;amp;from=now-7d&amp;amp;to=now-1h&amp;amp;refresh=15m&quot;&gt;activity reporting via CNCF DevStats&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;
        Created multiple granular channels in the Curiefense Slack workspace, making it easier to follow and participate in specific parts in the project. Slack members can interact with project maintainers, and can also subscribe to our
        realtime GitHub repository feed.&lt;br /&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot;&gt;
    &lt;div&gt;
        &lt;img src=&quot;https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d1f417e492c8d476094cf_8TxW2CC76Y5PPK724sbfuKUYj45-nKtkomQVjv0NG2n38a6ajhYrzbA_FNlDX5ud8BkafIweJ7uor_WF-dvSTDsDmmyWK3lXOK180j2rFOT3XaHK3MClYjtVrAARmPVMBMFrFt27.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; loading=&quot;auto&quot; /&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;To join the Curiefense workspace on Slack, just email &lt;a href=&quot;mailto:community@curiefense.io&quot;&gt;community@curiefense.io&lt;/a&gt; for an invite.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    To follow us elsewhere, Twitter (&lt;a href=&quot;https://twitter.com/curiefense&quot;&gt;https://twitter.com/curiefense&lt;/a&gt;) is our most-used social media channel. If you prefer email, we also have a
    &lt;a href=&quot;http://eepurl.com/hnnmpj&quot;&gt;newsletter&lt;/a&gt;.&amp;nbsp;
&lt;/p&gt;
&lt;h2&gt;Fun Stuff&lt;/h2&gt;
&lt;p&gt;
    To celebrate our launch, we now have &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-wallpaper&quot;&gt;Curiefense wallpaper&lt;/a&gt; available for your
    &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-wallpaper&quot;&gt;desktop&lt;/a&gt; and/or &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-zoom-virtual-backgrounds&quot;&gt;Zoom&lt;/a&gt;. Stay tuned for shirts and stickers,
    coming soon!
&lt;/p&gt;
&lt;h2&gt;All Are Welcome!&lt;/h2&gt;
&lt;p&gt;Curiefense is maintained by &lt;a href=&quot;https://www.reblaze.com/&quot;&gt;Reblaze&lt;/a&gt;, which is making significant investments into its development. That being said, Curiefense is a CNCF project, and is vendor-neutral.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    We ask anyone who is interested to join us (including competitors). Our goal is to provide the community with a robust cloud native security solution for Envoy Proxy, and all are welcome. The more we work together, the better it will be
    for everyone.
&lt;/p&gt;
&lt;h2&gt;Acknowledgments and Thanks&lt;/h2&gt;
&lt;p&gt;The Curiefense team would like to thank:&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://twitter.com/amye&quot;&gt;Amye Scavarda Perrin&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/cra&quot;&gt;Chris Aniszczyk&lt;/a&gt; at the CNCF with onboarding&lt;/li&gt;
    &lt;li&gt;
        Our advisors: &lt;a href=&quot;https://twitter.com/mattklein123&quot;&gt;Matt Klein&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ChrisUeland&quot;&gt;Chris Ueland&lt;/a&gt;, Chris Ferreira, James Bynoe, and the rest of
        &lt;a href=&quot;https://www.curiefense.io/about-us&quot;&gt;the team&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://twitter.com/g_uist&quot;&gt;Kerollany ‚ÄúGuist‚Äù&lt;/a&gt; for her awesome merch designs&lt;/li&gt;
    &lt;li&gt;Stephen and Emilia at O‚ÄôReilly for their help with &lt;a href=&quot;https://www.katacoda.com/curiefense&quot;&gt;our Katacoda scenarios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author></entry><entry><title type="html">Curiefense GA (1.3.0) Released</title><link href="/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-2" rel="alternate" type="text/html" title="Curiefense GA (1.3.0) Released" /><published>2021-03-01T00:00:00+05:00</published><updated>2021-03-01T00:00:00+05:00</updated><id>/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-2</id><content type="html" xml:base="/curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-2">&lt;p&gt;
    Curiefense is now in GA! üéâ The &lt;a href=&quot;https://docs.curiefense.io/v/1.3.0/installation/getting-started-with-curiefense&quot;&gt;latest version&lt;/a&gt; (1.3.0) is now available for deployment. A lot has happened since the initial release of v1.0
    in November, and not just in &lt;a href=&quot;https://docs.curiefense.io/v/1.3.0/reference/release-notes&quot;&gt;our changelog&lt;/a&gt;. Here are some of the highlights.
&lt;/p&gt;
&lt;h3&gt;Joining the Open Source and Cloud Native Communities&lt;/h3&gt;
&lt;p&gt;Curiefense is now a &lt;a href=&quot;https://www.curiefense.io/post/now-a-cncf-sandbox-project&quot;&gt;CNCF Sandbox Project&lt;/a&gt;, and we‚Äôre already making substantial progress in conforming the project to CNCF standards.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The project has &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/en/projects/4576&quot;&gt;earned the CII Best Practices Badge&lt;/a&gt; from the Linux Foundation.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    We have launched a podcast: ‚Äú&lt;a href=&quot;https://ctcn.fireside.fm/1&quot;&gt;Committing to Cloud Native&lt;/a&gt;.‚Äù Along with discussing news and current events in the community, we‚Äôll be documenting our journey as we integrate Curiefense into the
    cloud native ecosystem. Hopefully, the lessons we learn along the way can be useful to others who travel this path later.&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;h3&gt;New Interactive Learning Platform&lt;/h3&gt;
&lt;p&gt;
    Now you can try Curiefense without having to install anything. Our &lt;a href=&quot;https://www.katacoda.com/curiefense/scenarios/getting-started&quot;&gt;first scenario on Katacoda&lt;/a&gt; provides you with a live, remotely-accessible environment, and
    walks you through Curiefense‚Äôs initial deployment, management UI, and dashboards. More scenarios are on the way.
&lt;/p&gt;
&lt;h3&gt;Project Transparency and Community Participation&lt;/h3&gt;
&lt;p&gt;Curiefense has been an ‚Äúopen book‚Äù project from day one, and we‚Äôre continuing to make data even easier to access. Recently we have:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Created a &lt;a href=&quot;https://app.databox.com/datawall/3ddf913b2db3bb4f53586ec27aaee63106008ba72&quot;&gt;GitHub Dashboard by Databox&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://curiefense.devstats.cncf.io/d/8/dashboards?orgId=1&amp;amp;from=now-7d&amp;amp;to=now-1h&amp;amp;refresh=15m&quot;&gt;activity reporting via CNCF DevStats&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;
        Created multiple granular channels in the Curiefense Slack workspace, making it easier to follow and participate in specific parts in the project. Slack members can interact with project maintainers, and can also subscribe to our
        realtime GitHub repository feed.
    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;w-richtext-figure-type-image w-richtext-align-center&quot;&gt;
    &lt;div&gt;
        &lt;img src=&quot;https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d1f417e492c8d476094cf_8TxW2CC76Y5PPK724sbfuKUYj45-nKtkomQVjv0NG2n38a6ajhYrzbA_FNlDX5ud8BkafIweJ7uor_WF-dvSTDsDmmyWK3lXOK180j2rFOT3XaHK3MClYjtVrAARmPVMBMFrFt27.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; loading=&quot;auto&quot; /&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;To join the Curiefense workspace on Slack, just email &lt;a href=&quot;mailto:community@curiefense.io&quot;&gt;community@curiefense.io&lt;/a&gt; for an invite.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    To follow us elsewhere, Twitter (&lt;a href=&quot;https://twitter.com/curiefense&quot;&gt;https://twitter.com/curiefense&lt;/a&gt;) is our most-used social media channel. If you prefer email, we also have a
    &lt;a href=&quot;http://eepurl.com/hnnmpj&quot;&gt;newsletter&lt;/a&gt;.&amp;nbsp;
&lt;/p&gt;
&lt;h2&gt;Fun Stuff&lt;/h2&gt;
&lt;p&gt;
    To celebrate our launch, we now have &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-wallpaper&quot;&gt;Curiefense wallpaper&lt;/a&gt; available for your
    &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-wallpaper&quot;&gt;desktop&lt;/a&gt; and/or &lt;a href=&quot;https://github.com/curiefense/media/blob/main/README.md#-zoom-virtual-backgrounds&quot;&gt;Zoom&lt;/a&gt;. Stay tuned for shirts and stickers,
    coming soon!
&lt;/p&gt;
&lt;h2&gt;All Are Welcome!&lt;/h2&gt;
&lt;p&gt;Curiefense is maintained by &lt;a href=&quot;https://www.reblaze.com/&quot;&gt;Reblaze&lt;/a&gt;, which is making significant investments into its development. That being said, Curiefense is a CNCF project, and is vendor-neutral.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    We ask anyone who is interested to join us (including competitors). Our goal is to provide the community with a robust cloud native security solution for Envoy Proxy, and all are welcome. The more we work together, the better it will be
    for everyone.
&lt;/p&gt;
&lt;h2&gt;Acknowledgments and Thanks&lt;/h2&gt;
&lt;p&gt;The Curiefense team would like to thank:&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://twitter.com/amye&quot;&gt;Amye Scavarda Perrin&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/cra&quot;&gt;Chris Aniszczyk&lt;/a&gt; at the CNCF with onboarding&lt;/li&gt;
    &lt;li&gt;
        Our advisors: &lt;a href=&quot;https://twitter.com/mattklein123&quot;&gt;Matt Klein&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ChrisUeland&quot;&gt;Chris Ueland&lt;/a&gt;, Chris Ferreira, James Bynoe, and the rest of
        &lt;a href=&quot;https://www.curiefense.io/about-us&quot;&gt;the team&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://twitter.com/g_uist&quot;&gt;Kerollany ‚ÄúGuist‚Äù&lt;/a&gt; for her awesome merch designs&lt;/li&gt;
    &lt;li&gt;Stephen and Emilia at O‚ÄôReilly for their help with &lt;a href=&quot;https://www.katacoda.com/curiefense&quot;&gt;our Katacoda scenarios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Justin Dorfman</name></author><summary type="html">A lot has happened since the initial release of v1.0 in November, and not just in our changelog. Here are some of the highlights.</summary></entry><entry><title type="html">Now a CNCF Sandbox Project</title><link href="/now-a-cncf-sandbox-project" rel="alternate" type="text/html" title="Now a CNCF Sandbox Project" /><published>2021-02-18T00:00:00+05:00</published><updated>2021-02-18T00:00:00+05:00</updated><id>/now-a-cncf-sandbox-project</id><content type="html" xml:base="/now-a-cncf-sandbox-project">&lt;p&gt;We‚Äôre delighted to announce that Curiefense has been accepted as a CNCF Sandbox Project!&lt;/p&gt;
&lt;p&gt;
    The &lt;a href=&quot;https://www.cncf.io/&quot; target=&quot;_blank&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; is the home for many of the fastest-growing open source projects, including Kubernetes, Prometheus, and Envoy. It has hundreds of members,
    including all of the world‚Äôs largest software and cloud computing companies. In a nutshell, it is the center of development for the cloud native ecosystem.
&lt;/p&gt;
&lt;p&gt;We‚Äôre excited to make this announcement, for several reasons. First, as a Sandbox Project, Curiefense will be expected to progress toward compliance with CNCF standards.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;These requirements are strenuous, and rightfully so; the CNCF ecosystem is vendor-neutral, made up of technologies that are open, accessible, resilient, manageable, and observable.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    We‚Äôre eager to bring Curiefense into conformance with the CNCF criteria‚Äînot for the purpose of earning a badge or some other form of recognition from the community, but simply because it will make Curiefense better. Work is already
    underway toward this goal.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    We‚Äôre also excited for a second reason: being a Sandbox Project will bring Curiefense to the attention of the cloud native community. (Indeed, one of the Sandbox‚Äôs
    &lt;a href=&quot;https://www.cncf.io/sandbox-projects/&quot; target=&quot;_blank&quot;&gt;goals&lt;/a&gt; is to ‚Äúencourage public visibility‚Äù of its projects.) As stated in our &lt;a href=&quot;https://www.curiefense.io/manifesto&quot; target=&quot;_blank&quot;&gt;Manifesto&lt;/a&gt;, we believe
    that:
&lt;/p&gt;
&lt;blockquote&gt;
    Open source software and open standards have proven to surpass proprietary technology by all measures; they are the turbine behind the exponential growth of the Internet. Security is a critical aspect of running an online platform, and
    it deserves the best tools possible; therefore, open source is a better choice than a closed, proprietary &quot;patented&quot; one. Collaboration with the vast communities of Envoy, Kubernetes, and other cloud native products will bring in
    opinions and ideas from some of the brightest minds, and will improve the product and its performance.
&lt;/blockquote&gt;
&lt;p&gt;In short, being part of the Sandbox will help us to improve Curiefense in ways that wouldn‚Äôt necessarily have happened on their own, and this helps us to serve our users better.&lt;/p&gt;
&lt;p&gt;Lastly, every CNCF project is meant to contribute towards the Foundation‚Äôs mission, which is to ‚Äúmake cloud native computing ubiquitous‚Äù‚Äîa mission which we wholeheartedly support.&lt;/p&gt;
&lt;p&gt;
    We believe that the cloud native community can benefit from a robust, inherent set of web security technologies: a comprehensive, transparent, private, and scalable platform that‚Äôs fully integrated into the ecosystem. Becoming a Sandbox
    project will help us to provide this for everyone.
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Spiros Psarris</name></author><summary type="html">Curiefense has been accepted as a Sandbox Project within the Cloud Native Computing Foundation. Here's what this means, now and going forward.</summary></entry><entry><title type="html">Hostile Bot Detection Part 2: How Curiefense Does It</title><link href="/hostile-bot-detection-part-2-how-curiefense-does-it" rel="alternate" type="text/html" title="Hostile Bot Detection Part 2: How Curiefense Does It" /><published>2021-02-04T00:00:00+05:00</published><updated>2021-02-04T00:00:00+05:00</updated><id>/hostile-bot-detection-part-2-how-curiefense-does-it</id><content type="html" xml:base="/hostile-bot-detection-part-2-how-curiefense-does-it">&lt;p&gt;In the previous article on this topic, we discussed:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Why it‚Äôs so important to have a reliable method of filtering hostile bot traffic&lt;/li&gt;
    &lt;li&gt;Why reCAPTCHA has become such a popular service for providing it&lt;/li&gt;
    &lt;li&gt;And the problems with reCAPTCHA, including its privacy issues, suboptimal UX, and lack of effectiveness against modern attack tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now in this article, we‚Äôll discuss how Curiefense solves this problem.&lt;/p&gt;
&lt;h2&gt;Multiple Detection Mechanisms&lt;/h2&gt;
&lt;p&gt;Curiefense approaches bot management from multiple angles, and uses a series of filters to block malicious bots. They are:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Threat feeds&lt;/li&gt;
    &lt;li&gt;Rate limiting&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;ACLs (Access Control Lists)&lt;/li&gt;
    &lt;li&gt;Session Flow Control&lt;/li&gt;
    &lt;li&gt;Browser verification (for sites and web apps)&lt;/li&gt;
    &lt;li&gt;Client verification (for mobile app traffic)&lt;/li&gt;
    &lt;li&gt;Biometric behavioral analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    These are applied in a multi-stage sequence. To increase performance, low-overhead methods are applied first. Only traffic that passes the initial filtering is subjected to the more computationally demanding methods. It is very
    difficult for any forms of automated traffic to pass through the entire sequence.
&lt;/p&gt;
&lt;h2&gt;Threat Feeds&lt;/h2&gt;
&lt;p&gt;Curiefense consumes threat intelligence feeds, such as lists of IPs and ASNs currently being used by threat actors. Incoming requests from known-hostile sources can be identified and blocked.&lt;/p&gt;
&lt;p&gt;Of the various mechanisms Curiefense uses, this is the simplest. It obviously won‚Äôt detect hackers who are using advanced tactics (like abusing cellular gateways to access ‚Äòclean‚Äô IPs).&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    But it will eliminate a large amount of easily-detected hostile requests with minimal processing. For example, if your service is getting traffic from an IP on the Spamhaus DROP list, there‚Äôs no reason to waste extra CPU cycles on
    analyzing it.
&lt;/p&gt;
&lt;h2&gt;Rate Limiting&lt;/h2&gt;
&lt;p&gt;Many bot attacks require a large number of requests to be sent to the targeted system. Common examples are stuffing credentials into login forms, payment card validation, and other types of brute-force attacks.&lt;/p&gt;
&lt;p&gt;
    Curiefense can be configured to count requests that match specific characteristics (e.g., requests from the same traffic source, or that have a specific header, and so on). A traffic source can be blocked when it submits too many
    requests within a configured time.
&lt;/p&gt;
&lt;p&gt;
    This mechanism doesn‚Äôt attempt to identify bots by their characteristics; rather, it blocks hostile traffic (whether bot or human) based on the behavior of the sender. In practice, this winds up filtering mostly bot traffic, since a lot
    of bot-based attacks are volumetric.
&lt;/p&gt;
&lt;h2&gt;ACLs&amp;nbsp;&lt;/h2&gt;
&lt;p&gt;Curiefense admins can configure the system to reject traffic based on a variety of characteristics. Common examples are Tor browser users, anonymous proxy users, requests originating from a public cloud IP, and so on.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Depending on the ACLs that are chosen, typically a large portion of the excluded requests are sent by bots.&lt;/p&gt;
&lt;h2&gt;Session Flow Control&lt;/h2&gt;
&lt;p&gt;This is another behavioral mechanism.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    Many applications have a natural flow to the requests that the server receives. For example, when someone visits a page in a web application, the server might receive a number of GET requests. Then as the user interacts with the page, a
    POST request is sent.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;Often, hostile bots will not follow this sequence. For example, a bot might attempt an ATO (account takeover) by going to a login page and submitting a number of POST calls, without previously sending any GETs.&lt;/p&gt;
&lt;p&gt;Curiefense can be configured to enforce request sequences within a session. Any bot (or for that matter, human) who submits out-of-sequence requests can be blocked.&lt;/p&gt;
&lt;h2&gt;Browser Verification (for sites and web apps)&lt;/h2&gt;
&lt;p&gt;A common way for detecting bots is to verify that the visitor is using a legitimate browser (Chrome, Firefox, Safari, etc.) instead of a headless browser or emulator.&lt;/p&gt;
&lt;p&gt;Threat actors know this, of course. As a result, many modern bots masquerade as human visitors using legitimate browsers. Unfortunately, many commercial security solutions cannot detect that this is being done.&lt;/p&gt;
&lt;p&gt;
    Curiefense offers optional browser verification capabilities that go beyond the techniques used by most commercial solutions. For example, it injects subtle errors into the browser environment, and sees how the ‚Äòbrowser‚Äô reacts.
    Curiefense knows the exceptions that are thrown by legitimate browsers (with the claimed version, screen resolution, width, etc.). Other reactions are anomalous, and indicate that this ‚Äòvisitor‚Äô is probably a bot.
&lt;/p&gt;
&lt;h2&gt;Client Verification (for mobile apps)&lt;/h2&gt;
&lt;p&gt;Mobile/native apps have no browser environment to verify. However, they present a different opportunity for client verification.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    Curiefense offers an optional SDK for iOS and Android apps. The apps are rebuilt and published with the SDK embedded. In use, the SDK signs the application, authenticates the device, hardens all communication, and verifies user
    identity.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;This provides a reliable, secure mechanism to verify that the packets are originating from a legitimate user, and not from an emulator or other bot.&lt;/p&gt;
&lt;h2&gt;Biometric UEBA analysis&lt;/h2&gt;
&lt;p&gt;
    Curiefense offers an optional Biometric Behavioral Analysis capability. It uses Machine Learning and UEBA (User and Entity Behavioral Analytics) to construct behavioral profiles of legitimate users and how they interact with the
    protected applications. Attempts at anomalous usage can then be detected and blocked.
&lt;/p&gt;
&lt;p&gt;
    This is similar to the Session Flow Control described earlier, but much more extensive and sophisticated. Instead of relying upon an admin to define a profile, Curiefense does it automatically, based upon a much wider range of
    parameters. They include:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Device and software data&lt;/strong&gt; (the user‚Äôs hardware, its screen resolution and orientation, the software used, battery level, stack trace, fronts and extensions, emulator detection, window size, hidden iframes, etc.)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;User interface and events&lt;/strong&gt; (mouse/pointer movements, clicks, taps, zooms, scrolls, keystrokes, speed of entry, etc.)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Session data&lt;/strong&gt; (requests sent, timing, frequency, etc.)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Consumption analytics&lt;/strong&gt; (pages viewed, time spent, resources requested, etc.)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Application-specific events&lt;/strong&gt;, and other results of user actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    Threat actors have no access to this data, or the profiles that are created from them. This makes the profiling extremely resistant to reverse-engineering. Note too that the only way for a threat actor to avoid this form of filtering is
    to avoid any activities that a legitimate user would not do. In other words, for hostile actors to avoid being blocked, they cannot perform any hostile actions.
&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
    In the early days of CAPTCHA and then reCAPTCHA, these technologies provided useful benefits to organizations on the web. However, reCAPTCHA is no longer the best way for automatically blocking hostile bot traffic. These two articles
    have illustrated the differences between reCAPTCHA and Curiefense‚Äôs bot filtering.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    Curiefense detects bots without relying on any interactions with a human visitor. All of the techniques it uses are accomplished in a few milliseconds, and much of the processing (such as the browser verification) only occurs once, at
    the beginning of a session.
&lt;/p&gt;
&lt;p&gt;Of course, threat actors will continue to refine their techniques and attack tools. At the same time, we‚Äôre continuing to improve Curiefense. We have a variety of new features on the way, and more are planned beyond those.&lt;/p&gt;
&lt;p&gt;
    If you are a security enthusiast, devops engineers, etc. and want to know more about Curiefense, or if you‚Äôd like to file bugs or feature requests, feel free to reach out via our
    &lt;a href=&quot;https://github.com/curiefense/curiefense&quot;&gt;GitHub&lt;/a&gt;. We‚Äôd love to hear from you!
&lt;/p&gt;</content><author><name>Spiros Psarris</name></author><summary type="html">The previous article on Hostile Bot Detection discussed why it is so important, and the problems with using reCAPTCHA for this. Now in part 2, we'll discuss how Curiefense identifies and filters malicious bots.</summary></entry><entry><title type="html">Hostile Bot Detection Part 1: Replacing reCAPTCHA</title><link href="/hostile-bot-detection-part-1-replacing-recaptcha" rel="alternate" type="text/html" title="Hostile Bot Detection Part 1: Replacing reCAPTCHA" /><published>2021-01-28T00:00:00+05:00</published><updated>2021-01-28T00:00:00+05:00</updated><id>/hostile-bot-detection-part-1-replacing-recaptcha</id><content type="html" xml:base="/hostile-bot-detection-part-1-replacing-recaptcha">&lt;p&gt;Bot detection is crucially important for any organization with a web presence. Almost all attacks involve automated traffic in one form or another, and excluding hostile bots is a vital part of good security.&lt;/p&gt;
&lt;p&gt;
    Some malicious bots are easy to detect and block. (&lt;em&gt;‚ÄúWe‚Äôre getting ping floods from a few IPs in China.‚Äù&lt;/em&gt;) But others can be much more subtle. (
    &lt;em&gt;‚ÄúWe‚Äôre getting failed login attempts from a cellular IP in the US. Is this a user who forgot their password, or is it a bot attempting an account takeover?‚Äù&lt;/em&gt;)
&lt;/p&gt;
&lt;p&gt;
    Organizations need a reliable way to filter out bots from their traffic. Today, many use Google‚Äôs reCAPTCHA service. Its promise is very attractive‚Äîjust add it to your site, and it will automatically screen out bots. Only human visitors
    will be let through.
&lt;/p&gt;
&lt;p&gt;reCAPTCHA is very popular, but it is far from ideal. In fact, a growing number of organizations are removing it from their sites and apps. This is due to a number of issues, including privacy, user experience, and effectiveness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Privacy&lt;/strong&gt;. Across the web today, there‚Äôs a growing backlash against the tracking of user behavior. More and more, reCAPTCHA is finding itself in the crosshairs.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    reCAPTCHA is &lt;a href=&quot;https://www.google.com/recaptcha/about/&quot; target=&quot;_blank&quot;&gt;used on four million sites&lt;/a&gt;, including &lt;a href=&quot;https://trends.builtwith.com/widgets/reCAPTCHA&quot; target=&quot;_blank&quot;&gt;40 percent of the top 10,000&lt;/a&gt;.
    Webmasters are encouraged to install it on &lt;em&gt;every page&lt;/em&gt; of their sites. This gives Google an unprecedented opportunity to collect data on browsing behavior as users move across the web.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    It also potentially allows the tracking and identifying of individual users. Some researchers have said that this could be happening; they note that reCAPTCHA seems to operate differently when they browse anonymously, compared to when
    they are logged into their Google accounts. If this is true, Google could be using its cookies to connect browsing-habit data with individual user accounts. Note too that web users cannot opt out of whatever reCAPTCHA is doing on the
    sites that they visit.
&lt;/p&gt;
&lt;p&gt;
    We don‚Äôt know for sure if any of this is occurring, but that‚Äôs the problem. Although many people would like to understand reCAPTCHA‚Äôs behind-the-scenes behavior, Google provides few details about it. Thus, many webmasters are concluding
    that the prudent course of action is to assume the worst, and to start looking for alternatives.
&lt;/p&gt;
&lt;p&gt;
    &lt;strong&gt;User Experience&lt;/strong&gt;: Early versions of reCAPTCHA presented puzzles to web users. The latest version (v3) is supposed to operate invisibly most of the time. Nevertheless, it still sometimes interrupts user sessions with its
    challenges. This introduces friction and degrades the UX.
&lt;/p&gt;
&lt;p&gt;
    &lt;strong&gt;Effectiveness&lt;/strong&gt;: Despite the compromises described above, many organizations would still accept these drawbacks as long as reCAPTCHA could reliably exclude automated traffic from their sites. Unfortunately, this is no
    longer the case.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    For example, researchers have shown that &lt;a href=&quot;https://ui.adsabs.harvard.edu/abs/2019arXiv190301003A/abstract&quot; target=&quot;_blank&quot;&gt;Reinforcement Learning can be used to defeat reCAPTCHA v3&lt;/a&gt; with more than a 90 percent success rate.
    There‚Äôs even a &lt;a href=&quot;https://github.com/dessant/buster&quot; target=&quot;_blank&quot;&gt;browser extension that can solve reCAPTCHAs&lt;/a&gt;. reCAPTCHA is still effective against simple bots, but hackers who are willing to use more sophisticated tools
    can bypass it.
&lt;/p&gt;
&lt;h2&gt;Seeking Alternatives&lt;/h2&gt;
&lt;p&gt;
    Because of the issues surrounding reCAPTCHA, many organizations are now seeking other services to replace it. Unfortunately, most of these have problems of their own. For example, hCaptcha has a more intrusive UX, and many people object
    to its business model of farming and selling visitor brain-cycles. (It requires visitors to review machine-learning datasets.)
&lt;/p&gt;
&lt;h2&gt;Curiefense: Private and Invisible Bot Filtering&lt;/h2&gt;
&lt;p&gt;Clearly, something is needed that can provide the benefits promised by reCAPTCHA while avoiding its problems.&lt;/p&gt;
&lt;p&gt;
    As an Envoy extension, Curiefense can build traffic filtering directly into containers, service meshes, and so on. Since bot detection is such an important component of web security today, we wanted Curiefense to provide hostile bot
    management that‚Äôs just as automated as reCAPTCHA. In other words, once it‚Äôs installed, it needs to just work.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;At the same time, we wanted it to avoid reCAPTCHA‚Äôs issues. So, Curiefense‚Äôs bot detection needs to be:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Private&lt;/li&gt;
    &lt;li&gt;Invisible to the visitor at &lt;em&gt;all&lt;/em&gt; times&lt;/li&gt;
    &lt;li&gt;And effective.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of these goals, privacy was the easiest, since it‚Äôs inherent to Curiefense‚Äôs architecture. Unless you explicitly share Curiefense‚Äôs data with a third party, nobody else has access to it.&lt;/p&gt;
&lt;p&gt;
    Invisibility is a more challenging design constraint, but we knew it was worth the effort. In fact, this approach increases security. When a web visitor can‚Äôt interact directly with a security mechanism, it makes it much more difficult
    for a threat actor to reverse-engineer it. (For that matter, attackers have no way of knowing that Curiefense is even being used.)
&lt;/p&gt;
&lt;p&gt;
    That leaves effectiveness, which of course is the most important aspect, and is also a major challenge. Modern bots can be quite sophisticated, and the latest generation of tools can do a credible job of mimicking human visitors.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;In Part 2, we‚Äôll discuss how Curiefense tackles this problem. Stay tuned!&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Spiros Psarris</name></author><summary type="html">reCAPTCHA is a popular service for automatically excluding bots, but there is a growing dissatisfaction over its UX, effectiveness, and potential lack of privacy. For organizations seeking an alternative, what is available to replace it?</summary></entry><entry><title type="html">API Security, Part 3</title><link href="/api-security-part-3" rel="alternate" type="text/html" title="API Security, Part 3" /><published>2021-01-21T00:00:00+05:00</published><updated>2021-01-21T00:00:00+05:00</updated><id>/api-security-part-3</id><content type="html" xml:base="/api-security-part-3">&lt;p&gt;
    The first article in this series (&lt;a href=&quot;https://www.curiefense.io/post/api-security-part-1&quot;&gt;API Security, Part 1&lt;/a&gt;) discussed some of the challenges in protecting APIs from hostile traffic, and gave an overview of Curiefense‚Äôs
    approach. The second article (&lt;a href=&quot;https://www.curiefense.io/post/api-security-part-2&quot;&gt;API Security, Part 2&lt;/a&gt;) discussed these security mechanisms:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;API Discovery&lt;/li&gt;
    &lt;li&gt;Identity-Based Filtering&lt;/li&gt;
    &lt;li&gt;Mobile Client Authentication&lt;/li&gt;
    &lt;li&gt;Rate Limiting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this third and final article, we‚Äôll discuss these additional mechanisms:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;API Session Flow Control&lt;/li&gt;
    &lt;li&gt;Behavioral Profiling and API Abuse Prevention&lt;/li&gt;
    &lt;li&gt;Content Filtering&lt;/li&gt;
    &lt;li&gt;Hostile Bot Detection&lt;/li&gt;
    &lt;li&gt;Deep Packet Inspection&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;API Session Flow Control&lt;/h2&gt;
&lt;p&gt;Most APIs have a natural, organic flow to them. For legitimate users, there will usually be some calls that occur early in a session, then others will occur afterwards. Many calls will have a specific sequence to them.&lt;/p&gt;
&lt;p&gt;For example, a mobile app might begin with a lot of GET calls, as it initializes and retrieves data. Then once initialization is complete, it might send a POST call containing the user‚Äôs login details.&lt;/p&gt;
&lt;p&gt;Often, attackers will not follow this sequence. For example, a hostile bot might attempt an ATO (account takeover) by jumping straight into a series of POST calls as part of a credential stuffing attack.&lt;/p&gt;
&lt;p&gt;Curiefense can block out-of-sequence calls to an API. The screenshot above shows an example that will not permit a POST call unless it was preceded by a GET to /login.html, followed by a GET to /static/login-form.js.&lt;/p&gt;
&lt;p&gt;In a later release, Curiefense will not only allow admins to define flow control sequences, it will also analyze past behavior and recommend new sequences for enforcement.&lt;/p&gt;
&lt;h2&gt;Behavioral Profiling and API Abuse Prevention&lt;/h2&gt;
&lt;p&gt;
    Curiefense has optional modules that use Machine Learning (ML) and UEBA (User and Entity Behavioral Analytics) to learn behavioral patterns and other biometric characteristics of legitimate users. Attempts at anomalous usage can be
    blocked, or merely flagged for monitoring.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    After an initial period of learning and accumulation of usage data/metrics, Curiefense‚Äôs ML-based UEBA can detect complex, application-specific attacks: everything from inventory denial attacks on travel and ecommerce applications to
    SMS spam being sent through telecom APIs.&lt;br /&gt;
&lt;/p&gt;
&lt;h2&gt;Content Filtering&lt;/h2&gt;
&lt;p&gt;Curiefense admins can set up security policies that define acceptable content for API calls (their headers, payloads, etc.).&lt;/p&gt;
&lt;p&gt;
    These policies are flexible. Admins can &lt;strong&gt;ban&lt;/strong&gt; calls with defined characteristics, or &lt;strong&gt;allow&lt;/strong&gt; calls with defined characteristics, or &lt;strong&gt;require&lt;/strong&gt; calls to have defined characteristics, or any
    combination of the above across an API.
&lt;/p&gt;
&lt;h2&gt;API Schema Enforcement&lt;/h2&gt;
&lt;p&gt;Content filtering can be used for API schema enforcement. In the current version of Curiefense, partial semantic schema validation is available by creating PCRE definitions for parameter properties.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;A later release of Curiefense will offer full validation via &lt;em&gt;cloud functions&lt;/em&gt;: custom Lua code that can be executed during processing.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Hostile Bot Detection&lt;/h2&gt;
&lt;p&gt;Many traditional security solutions offer bot management only as an add-on module, if it is available at all. We believe this is unfortunate, because almost all web attacks today involve bot activity in one form or another.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;So, when designing Curiefense, we wanted bot management and hostile bot detection to be inherent capabilities of the platform.&lt;/p&gt;
&lt;p&gt;
    Curiefense allows users to exempt specific bots (e.g., search engine spiders) from filtering if desired. It also includes features for detecting hostile automated traffic, such as consumption of data feeds containing geolocations and
    IPs known to be used by malicious bots.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    One of our design goals was to provide human detection that doesn‚Äôt require users to do anything (like solving a CAPTCHA puzzle, for example). As a result, Curiefense includes challenge mechanisms to invisibly recognize bots which are
    using headless browsers or emulators, and they take only a few milliseconds to accomplish at the beginning of a session.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;Behavioral profiling and API abuse prevention (which were described earlier) also play a large role in bot detection, since most attacks today involve bots to varying degrees.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Deep Packet Inspection (WAF)&lt;/h2&gt;
&lt;p&gt;Along with everything else described so far, Curiefense includes‚Äîof course!‚Äîa WAF.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This defends against injection attempts (of SQL, code, and commands), XSS, out-of-limit arguments, malicious payloads, protocol exploits, cookie and session poisoning, and more. Basically, everything that a WAF should defend against.&lt;/p&gt;
&lt;p&gt;
    Out of the box, Curiefense includes an extensive database of threat signatures. In addition to this, users can also construct custom API filters to allow or block requests based on their content (as described earlier), and then assign
    these filters to various scopes (from globally across the API down to specific destination endpoints).&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;Automation features include regular updates to the threat signature database, and a default security profile that protects every path/endpoint which hasn‚Äôt been explicitly configured.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://www.curiefense.io/post/the-curiefense-waf&quot;&gt;the Curiefense WAF&lt;/a&gt;.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
    API security is simultaneously one of the most challenging and most important tasks in cybersecurity today. Today‚Äôs threat environment includes a wide variety of methods for compromising systems via their APIs; meanwhile, legacy
    security solutions often rely on techniques (such as browser environment identification) which are not applicable to APIs.
&lt;/p&gt;
&lt;p&gt;
    We designed Curiefense from the ground up to provide APIs with robust protection. It offers the same range of security technologies to services and microservices as it does to sites and apps, and it offers additional API-specific
    mechanisms as well.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;We believe that Curiefense already offers API security that is at least equal to, and often better than, most solutions available today. However, we aren‚Äôt done yet; as mentioned above, there are more features coming.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Please feel free to send us your ideas, feedback, and feature requests. We‚Äôd love to hear from you!&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Spiros Psarris</name></author><summary type="html">This article continues the discussion of API security mechanisms, including session flow control, behavioral profiling, content filtering, hostile bot detection, and deep packet inspection.</summary></entry><entry><title type="html">Adding Web Security to Envoy</title><link href="/adding-web-security-to-envoy" rel="alternate" type="text/html" title="Adding Web Security to Envoy" /><published>2021-01-11T00:00:00+05:00</published><updated>2021-01-11T00:00:00+05:00</updated><id>/adding-web-security-to-envoy</id><content type="html" xml:base="/adding-web-security-to-envoy">&lt;p&gt;As &lt;a href=&quot;https://www.envoyproxy.io/&quot; target=&quot;_blank&quot;&gt;Envoy&lt;/a&gt; continues to grow and becomes more widely adopted, a natural next step is to leverage its inherent extensibility to add security capabilities.&lt;/p&gt;
&lt;p&gt;
    Robust security is obviously a vital requirement for any cloud-native organization today. Threat actors are well-financed, highly skilled, and relentless. Meanwhile, organizations continue to deploy more apps, services, and APIs, thus
    continuing to expand their attack surfaces.
&lt;/p&gt;
&lt;p&gt;
    The commercial market offers many security solutions which can filter and block hostile requests within incoming traffic. However, these are all proprietary, closed-source products. For users who prefer open solutions, this situation is
    obviously not ideal.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    To make matters worse, most proprietary solutions run outside of the user‚Äôs perimeter. This means that the traffic stream must be routed to the vendor‚Äôs infrastructure, decrypted, analyzed, and then re-encrypted before it can be sent to
    the user‚Äôs environment. Not only does this introduce additional latency, it also exposes the user‚Äôs data and metrics to a third party, creating a severe compromise of privacy.
&lt;/p&gt;
&lt;p&gt;Envoy gives us an opportunity to solve all these problems.&lt;/p&gt;
&lt;p&gt;
    Envoy is ideally positioned to perform as a web security mechanism. It can filter traffic at various scales; it can be used as an ingress gateway for an entire environment, or to filter traffic for individual microservices, or anything
    in-between. It does so with an L3/L4 architecture, processing traffic on a byte-by-byte basis‚Äîwhich allows application-layer processing to be added on top.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;Most importantly, it‚Äôs extensible. It‚Äôs designed to be easily augmented with additional capabilities, such as web security.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    However, adding security is a non-trivial undertaking. Today‚Äôs threat environment is broad and diverse; an Envoy security extension would need internal logic that could analyze traffic in multiple ways, in order to identify the many
    different types of possible attacks. This analysis would need to be stateful, not only within sessions but also across traffic sources. (While some attacks‚Äîfor example, SQL injection‚Äîcan be detected within individual requests, other
    types of attacks are waged using a series of requests that individually seem to be benign.)&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;Also, the threat environment is constantly evolving. Therefore, this extension would need to consume threat intelligence feeds, and be able to automatically update its security posture as new threats emerged.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    Furthermore, Envoy is known for having best-in-class observability, so a security extension should be consistent with this. Users should be able to see everything that is happening within their environments, and to understand all the
    traffic-filtering decisions that are being made, and why.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;Lastly, this extension would need to support cloud-native practices, and work well within the ecosystem. Ideally, it would be open source.&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Curiefense: a security extension for Envoy&lt;/h2&gt;
&lt;p&gt;Curiefense (&lt;a href=&quot;https://www.curiefense.io/&quot;&gt;https://www.curiefense.io/&lt;/a&gt;) is an OSS Envoy extension designed according to these requirements.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    Curiefense (named after the famous scientist &lt;a href=&quot;https://www.curiefense.io/marie-curie&quot; target=&quot;_blank&quot;&gt;Marie Curie&lt;/a&gt;) adds a broad set of automated web security tools to Envoy: WAF, DDoS protection, bot management, API security,
    rate limiting, session flow control, and more. It includes capabilities that rival, and in many cases exceed, those of commercial closed-source security solutions.
&lt;/p&gt;
&lt;p&gt;
    Using an Envoy extension to filter traffic makes external third-party solutions unnecessary, because security can be baked into the environment itself. This means that cloud-native organizations will no longer need to compromise on
    issues such as latency, openness, vendor lock-in, or privacy.&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    Curiefense is being submitted for sandboxing within the CNCF ecosystem. The project is meant to provide a GitOps platform that is open, extensible, adaptive and evolving‚Äîone that provides robust security while still preserving total
    privacy for its users.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    We‚Äôre eager to &lt;a href=&quot;https://github.com/curiefense/curiefense/discussions&quot;&gt;receive feedback, opinions, and ideas from the community&lt;/a&gt;, to help us make Curiefense a better tool for everyone. Feel free to reach out via our
    &lt;a href=&quot;https://github.com/curiefense/curiefense/&quot;&gt;GitHub&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">As Envoy Proxy continues to grow and becomes more widely adopted, a natural next step is to add security capabilities. Curiefense leverages Envoy's extensibility and flexibility to provide traffic filtering for a wide variety of use cases.</summary></entry><entry><title type="html">API Security, Part 2</title><link href="/api-security-part-2" rel="alternate" type="text/html" title="API Security, Part 2" /><published>2021-01-05T00:00:00+05:00</published><updated>2021-01-05T00:00:00+05:00</updated><id>/api-security-part-2</id><content type="html" xml:base="/api-security-part-2">&lt;p&gt;
    The previous article (&lt;a href=&quot;https://www.curiefense.io/post/api-security-part-1&quot;&gt;API Security, Part 1&lt;/a&gt;) discussed some of the challenges in protecting APIs from hostile traffic, and gave an overview of Curiefense‚Äôs approach. Now in
    this article, we‚Äôll discuss these security mechanisms:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;API Discovery&lt;/li&gt;
    &lt;li&gt;Identity-Based Filtering&lt;/li&gt;
    &lt;li&gt;Mobile Client Authentication&lt;/li&gt;
    &lt;li&gt;Behavior Enforcement&lt;/li&gt;
    &lt;li&gt;Rate Limiting&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;API Discovery&lt;/h2&gt;
&lt;p&gt;(This feature is pending in the next release of Curiefense.)&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
    The Profiling mechanism (discussed &lt;a href=&quot;https://www.curiefense.io/post/an-intuitive-system&quot;&gt;here&lt;/a&gt;) includes a default ruleset to identify API usage. If you customize it to match your APIs, as shown in the UI screenshot above, it
    creates an easy way to identify incoming calls.
&lt;/p&gt;
&lt;p&gt;This has several uses, including:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The ability to assign specific security policies only to API traffic.&lt;/li&gt;
    &lt;li&gt;The ability to use Curiefense for performing API Discovery. You can look at your Grafana dashboard and easily see all the incoming API traffic in one snapshot.&amp;nbsp;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Identity-Based Filtering&lt;/h2&gt;
&lt;p&gt;Curiefense can block API calls based on the identity of the caller. Examples:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Anonymous proxy and VPN users&lt;/li&gt;
    &lt;li&gt;Tor users&lt;/li&gt;
    &lt;li&gt;Calls originating from a public cloud IP&lt;/li&gt;
    &lt;li&gt;Calls originating from an ASN on the current Spamhaus DROP list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Curiefense can also exempt API calls from filtering based on defined characteristics. Example: calls coming from internal IPs.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Mobile Client Authentication&lt;/h2&gt;
&lt;p&gt;
    Mobile/native apps present an interesting situation. On the one hand, they are API clients, and so they will be secured by the usual filtering of API traffic. However, we realized that these apps present an opportunity for additional
    protection.
&lt;/p&gt;
&lt;p&gt;
    As a result, Curiefense offers an optional SDK for iOS and Android apps, which are rebuilt and published with the SDK embedded. In use, the SDK signs the application, authenticates the device, hardens all communication, and verifies
    user identity.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;This provides a reliable, secure mechanism to verify that the packets are originating from a legitimate user, and not from an emulator or other bot.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Behavior Enforcement&amp;nbsp;&lt;/h2&gt;
&lt;p&gt;This category includes several different mechanisms, including rate limiting, API session flow control, and behavioral profiling / API abuse prevention.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Rate Limiting&lt;/h2&gt;
&lt;p&gt;You can configure Curiefense to block all API calls that exceed a specific limit within a certain period of time.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(‚ÄúLimit‚Äù usually refers to the number of calls made by a traffic source, but it can also be defined as the number of calls made with a specific header, cookie, argument, attribute, etc.)&lt;/p&gt;
&lt;p&gt;This mechanism protects APIs against a wide variety of attacks, including:&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;DDoS&lt;/li&gt;
    &lt;li&gt;ATO (Account Takeover) attempts using credential stuffing, brute-force credential discovery, and so on&lt;/li&gt;
    &lt;li&gt;payment card validation and discovery&lt;/li&gt;
    &lt;li&gt;data and content scraping&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;input fuzzing&lt;/li&gt;
    &lt;li&gt;enumeration&lt;/li&gt;
    &lt;li&gt;API reverse engineering&lt;/li&gt;
    &lt;li&gt;Every other attack that relies upon a significant volume of calls&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Coming Up Next&lt;/h2&gt;
&lt;p&gt;In the final article in this series, we‚Äôll discuss API session flow control, behavioral profiling, content filtering, hostile bot detection, and deep packet inspection.&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Curiefense includes a number of security mechanisms for defending APIs against hostile traffic. This article discusses API Discovery, Identity-Based Filtering, Mobile Client Authentication, Behavior Enforcement, and Rate Limiting.</summary></entry><entry><title type="html">API Security, Part 1</title><link href="/api-security-part-1" rel="alternate" type="text/html" title="API Security, Part 1" /><published>2020-12-30T00:00:00+05:00</published><updated>2020-12-30T00:00:00+05:00</updated><id>/api-security-part-1</id><content type="html" xml:base="/api-security-part-1">&lt;p&gt;API security is increasingly important on the web today, thanks to microservice architectures, mobile apps, and other growing trends. It‚Äôs a broad subject, and includes requirements such as:&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Secure coding practices (e.g., input validation)&amp;nbsp;&lt;/li&gt;
    &lt;li&gt;Authentication, authorization, and access control&lt;/li&gt;
    &lt;li&gt;Monitoring and analytics (which are necessary for API Management)&lt;/li&gt;
    &lt;li&gt;API Discovery (also part of API Management)&lt;/li&gt;
    &lt;li&gt;Detecting and blocking malicious/abusive calls to an API.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last requirement (preventing API abuse) is an especially complicated task. Endpoints are subject to a wide variety of malicious activities: hostile bots, volumetric attacks, SQL/code injection attempts, and so on.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;As an Envoy plugin, Curiefense focuses on HTTP traffic filtering; it detects and blocks threats within the incoming requests sent to an endpoint. Before discussing them, let‚Äôs talk about API protection in general.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Challenges in Protecting APIs&lt;/h2&gt;
&lt;p&gt;Many security solutions don‚Äôt protect APIs to the same degree as they do for web applications. There are a couple of reasons for this.&lt;/p&gt;
&lt;p&gt;
    First, in the early days of the web, APIs were less important than they are today. Few security solutions were designed with them in mind, and so API security features tended to be added on later. With Curiefense, we didn‚Äôt have this
    problem; we had the opportunity to build in API protection from the ground up.&amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
    The second issue is that APIs have some unique security requirements, compared to web apps. Some of the conventional techniques used to secure app traffic don‚Äôt work for APIs. For example, a traditional way to detect hostile bots is to
    verify the user‚Äôs browser environment‚Äîbut for an API user, there is no browser to verify.
&lt;/p&gt;
&lt;p&gt;Here‚Äôs how Curiefense addresses these challenges.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;tl;dr: APIs Get Equal Treatment and Full Protection&lt;/h2&gt;
&lt;p&gt;Curiefense protects all forms of traffic equally. Calls to a REST API enjoy the same security mechanisms (WAF, DDoS, rate limiting, session control, etc.) as the requests sent to a site or web app.&lt;/p&gt;
&lt;p&gt;So, it defends APIs against the full spectrum of web-based attacks: SQL/code injection, XSS, DDoS, ATO (Account Takeover), app/API abuse, vulnerability scans, payment/gift card fraud, input fuzzing, scraping, etc. etc. etc.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Workflow and Security Mechanisms&amp;nbsp;&lt;/h2&gt;
&lt;p&gt;
    All incoming traffic (for web apps, sites, service APIs, mobile/native clients, and so on) is processed using the same tag-based workflow (discussed in-depth in a
    &lt;a href=&quot;https://www.curiefense.io/post/an-intuitive-system&quot;&gt;previous article&lt;/a&gt;), customized for the type of requests being filtered.
&lt;/p&gt;
&lt;p&gt;
    This means that administration is exactly the same for APIs as for web applications. All security rulesets are configured and assigned the same way, regardless of the way they are used. We wanted it to be equally straightforward in all
    use cases, whether you‚Äôre defining a policy for an individual site URL or you‚Äôre assigning rulesets to all API endpoints that match a specified regex.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Curiefense protects APIs using a variety of security mechanisms. The categories are:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;API Discovery&lt;/li&gt;
    &lt;li&gt;Identity-Based Filtering&lt;/li&gt;
    &lt;li&gt;Mobile Client Authentication&lt;/li&gt;
    &lt;li&gt;Behavior Enforcement&lt;/li&gt;
    &lt;li&gt;Content Filtering&lt;/li&gt;
    &lt;li&gt;Hostile Bot Detection&lt;/li&gt;
    &lt;li&gt;Deep Packet Inspection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next two articles in this series will discuss these mechanisms in detail.&lt;/p&gt;
&lt;p&gt;‚Äç&lt;/p&gt;</content><author><name></name></author><summary type="html">API security is increasingly important on the web today. However, filtering API traffic is, in some ways, quite different than protecting a web application. Here's how Curiefense approaches these challenges.</summary></entry></feed>