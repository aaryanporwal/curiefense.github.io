Name,Slug,CollectionID,ItemID,CreatedOn,UpdatedOn,PublishedOn,PostBody,PostSummary,MainImage,ThumbnailImage,Author
Curiefense GA (1.3.0) Released,curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more,603dd3b188409445e6274adc,603e40df5afbb5bb02ab6624,Tue Mar 02 2021 13:42:55 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 13:47:31 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 13:47:40 GMT+0000 (Coordinated Universal Time),"<p>Curiefense is now in GA! üéâ The <a href=""https://docs.curiefense.io/v/1.3.0/installation/getting-started-with-curiefense"">latest version</a> (1.3.0) is now available for deployment. A lot has happened since the initial release of v1.0 in November, and not just in <a href=""https://docs.curiefense.io/v/1.3.0/reference/release-notes"">our changelog</a>. Here are some of the highlights.</p><h3>Joining the Open Source and Cloud Native Communities</h3><p>Curiefense is now a <a href=""https://www.curiefense.io/post/now-a-cncf-sandbox-project"">CNCF Sandbox Project</a>, and we‚Äôre already making substantial progress in conforming the project to CNCF standards.&nbsp;<br></p><p>The project has <a href=""https://bestpractices.coreinfrastructure.org/en/projects/4576"">earned the CII Best Practices Badge</a> from the Linux Foundation.<br></p><p>We have launched a podcast: ‚Äú<a href=""https://ctcn.fireside.fm/1"">Committing to Cloud Native</a>.‚Äù Along with discussing news and current events in the community, we‚Äôll be documenting our journey as we integrate Curiefense into the cloud native ecosystem. Hopefully, the lessons we learn along the way can be useful to others who travel this path later.&nbsp;&nbsp;&nbsp;</p><h3>New Interactive Learning Platform</h3><p>Now you can try Curiefense without having to install anything. Our <a href=""https://www.katacoda.com/curiefense/scenarios/getting-started"">first scenario on Katacoda</a> provides you with a live, remotely-accessible environment, and walks you through Curiefense‚Äôs initial deployment, management UI, and dashboards. More scenarios are on the way. Be sure to check out our short <a href=""https://www.youtube.com/watch?v=HkoDPW46a8I"">explainer video</a>.</p><h3>Project Transparency and Community Participation</h3><p>Curiefense has been an ‚Äúopen book‚Äù project from day one, and we‚Äôre continuing to make data even easier to access. Recently we have:<br></p><ul><li>Created a <a href=""https://app.databox.com/datawall/3ddf913b2db3bb4f53586ec27aaee63106008ba72"">GitHub Dashboard by Databox</a></li><li>Added <a href=""https://curiefense.devstats.cncf.io/d/8/dashboards?orgId=1&from=now-7d&to=now-1h&refresh=15m"">activity reporting via CNCF DevStats</a></li><li>Created multiple granular channels in the Curiefense Slack workspace, making it easier to follow and participate in specific parts in the project. Slack members can interact with project maintainers, and can also subscribe to our realtime GitHub repository feed.</li></ul><p><br></p><figure class=""w-richtext-figure-type-image w-richtext-align-center""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d1f417e492c8d476094cf_8TxW2CC76Y5PPK724sbfuKUYj45-nKtkomQVjv0NG2n38a6ajhYrzbA_FNlDX5ud8BkafIweJ7uor_WF-dvSTDsDmmyWK3lXOK180j2rFOT3XaHK3MClYjtVrAARmPVMBMFrFt27.png"" width=""auto"" height=""auto"" loading=""auto""></div></figure><p><br></p><p>To join the Curiefense workspace on Slack, just email <a href=""mailto:community@curiefense.io"">community@curiefense.io</a> for an invite.<br></p><p>To follow us elsewhere, Twitter (<a href=""https://twitter.com/curiefense"">https://twitter.com/curiefense</a>) is our most-used social media channel. If you prefer email, we also have a <a href=""http://eepurl.com/hnnmpj"">newsletter</a>.&nbsp;</p><h2>Fun Stuff</h2><p>To celebrate our launch, we now have <a href=""https://github.com/curiefense/media/blob/main/README.md#-wallpaper"">Curiefense wallpaper</a> available for your <a href=""https://github.com/curiefense/media/blob/main/README.md#-wallpaper"">desktop</a> and/or <a href=""https://github.com/curiefense/media/blob/main/README.md#-zoom-virtual-backgrounds"">Zoom</a>. Stay tuned for shirts and stickers, coming soon!</p><h2>All Are Welcome!</h2><p>Curiefense is maintained by <a href=""https://www.reblaze.com/"">Reblaze</a>, which is making significant investments into its development. That being said, Curiefense is a CNCF project, and is vendor-neutral.&nbsp;<br></p><p>We ask anyone who is interested to join us (including competitors). Our goal is to provide the community with a robust cloud native security solution for Envoy Proxy, and all are welcome. The more we work together, the better it will be for everyone.</p><h2>Acknowledgments and Thanks</h2><p>The Curiefense team would like to thank:&nbsp;<br></p><ul><li><a href=""https://twitter.com/amye"">Amye Scavarda Perrin</a>, and <a href=""https://twitter.com/cra"">Chris Aniszczyk</a> at the CNCF with onboarding</li><li>Our advisors: <a href=""https://twitter.com/mattklein123"">Matt Klein</a>, <a href=""https://twitter.com/ChrisUeland"">Chris Ueland</a>, Chris Ferreira, James Bynoe, and the rest of <a href=""https://www.curiefense.io/about-us"">the team</a></li><li><a href=""https://twitter.com/g_uist"">Kerollany ‚ÄúGuist‚Äù</a> for her awesome merch designs</li><li>Stephen and Emilia at O‚ÄôReilly for their help with <a href=""https://www.katacoda.com/curiefense"">our Katacoda scenarios</a></li></ul>","A lot has happened since the initial release of v1.0 in November, and not just in our changelog. Here are some of the highlights.",,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d4cb85cb5d722b7998c07_Frame%201.png,justin-dorfman
Curiefense GA (1.3.0) Released,curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-2,603dd3b188409445e6274adc,603dd3b18840945826274b93,Mon Mar 01 2021 20:28:10 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 13:43:19 GMT+0000 (Coordinated Universal Time),,"<p>Curiefense is now in GA! üéâ The <a href=""https://docs.curiefense.io/v/1.3.0/installation/getting-started-with-curiefense"">latest version</a> (1.3.0) is now available for deployment. A lot has happened since the initial release of v1.0 in November, and not just in <a href=""https://docs.curiefense.io/v/1.3.0/reference/release-notes"">our changelog</a>. Here are some of the highlights.</p><h3>Joining the Open Source and Cloud Native Communities</h3><p>Curiefense is now a <a href=""https://www.curiefense.io/post/now-a-cncf-sandbox-project"">CNCF Sandbox Project</a>, and we‚Äôre already making substantial progress in conforming the project to CNCF standards.&nbsp;<br></p><p>The project has <a href=""https://bestpractices.coreinfrastructure.org/en/projects/4576"">earned the CII Best Practices Badge</a> from the Linux Foundation.<br></p><p>We have launched a podcast: ‚Äú<a href=""https://ctcn.fireside.fm/1"">Committing to Cloud Native</a>.‚Äù Along with discussing news and current events in the community, we‚Äôll be documenting our journey as we integrate Curiefense into the cloud native ecosystem. Hopefully, the lessons we learn along the way can be useful to others who travel this path later.&nbsp;&nbsp;&nbsp;</p><h3>New Interactive Learning Platform</h3><p>Now you can try Curiefense without having to install anything. Our <a href=""https://www.katacoda.com/curiefense/scenarios/getting-started"">first scenario on Katacoda</a> provides you with a live, remotely-accessible environment, and walks you through Curiefense‚Äôs initial deployment, management UI, and dashboards. More scenarios are on the way.</p><h3>Project Transparency and Community Participation</h3><p>Curiefense has been an ‚Äúopen book‚Äù project from day one, and we‚Äôre continuing to make data even easier to access. Recently we have:<br></p><ul><li>Created a <a href=""https://app.databox.com/datawall/3ddf913b2db3bb4f53586ec27aaee63106008ba72"">GitHub Dashboard by Databox</a></li><li>Added <a href=""https://curiefense.devstats.cncf.io/d/8/dashboards?orgId=1&from=now-7d&to=now-1h&refresh=15m"">activity reporting via CNCF DevStats</a></li><li>Created multiple granular channels in the Curiefense Slack workspace, making it easier to follow and participate in specific parts in the project. Slack members can interact with project maintainers, and can also subscribe to our realtime GitHub repository feed.</li></ul><p><br></p><figure class=""w-richtext-figure-type-image w-richtext-align-center""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d1f417e492c8d476094cf_8TxW2CC76Y5PPK724sbfuKUYj45-nKtkomQVjv0NG2n38a6ajhYrzbA_FNlDX5ud8BkafIweJ7uor_WF-dvSTDsDmmyWK3lXOK180j2rFOT3XaHK3MClYjtVrAARmPVMBMFrFt27.png"" width=""auto"" height=""auto"" loading=""auto""></div></figure><p><br></p><p>To join the Curiefense workspace on Slack, just email <a href=""mailto:community@curiefense.io"">community@curiefense.io</a> for an invite.<br></p><p>To follow us elsewhere, Twitter (<a href=""https://twitter.com/curiefense"">https://twitter.com/curiefense</a>) is our most-used social media channel. If you prefer email, we also have a <a href=""http://eepurl.com/hnnmpj"">newsletter</a>.&nbsp;</p><h2>Fun Stuff</h2><p>To celebrate our launch, we now have <a href=""https://github.com/curiefense/media/blob/main/README.md#-wallpaper"">Curiefense wallpaper</a> available for your <a href=""https://github.com/curiefense/media/blob/main/README.md#-wallpaper"">desktop</a> and/or <a href=""https://github.com/curiefense/media/blob/main/README.md#-zoom-virtual-backgrounds"">Zoom</a>. Stay tuned for shirts and stickers, coming soon!</p><h2>All Are Welcome!</h2><p>Curiefense is maintained by <a href=""https://www.reblaze.com/"">Reblaze</a>, which is making significant investments into its development. That being said, Curiefense is a CNCF project, and is vendor-neutral.&nbsp;<br></p><p>We ask anyone who is interested to join us (including competitors). Our goal is to provide the community with a robust cloud native security solution for Envoy Proxy, and all are welcome. The more we work together, the better it will be for everyone.</p><h2>Acknowledgments and Thanks</h2><p>The Curiefense team would like to thank:&nbsp;<br></p><ul><li><a href=""https://twitter.com/amye"">Amye Scavarda Perrin</a>, and <a href=""https://twitter.com/cra"">Chris Aniszczyk</a> at the CNCF with onboarding</li><li>Our advisors: <a href=""https://twitter.com/mattklein123"">Matt Klein</a>, <a href=""https://twitter.com/ChrisUeland"">Chris Ueland</a>, Chris Ferreira, James Bynoe, and the rest of <a href=""https://www.curiefense.io/about-us"">the team</a></li><li><a href=""https://twitter.com/g_uist"">Kerollany ‚ÄúGuist‚Äù</a> for her awesome merch designs</li><li>Stephen and Emilia at O‚ÄôReilly for their help with <a href=""https://www.katacoda.com/curiefense"">our Katacoda scenarios</a></li></ul>","A lot has happened since the initial release of v1.0 in November, and not just in our changelog. Here are some of the highlights.",,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d4cb85cb5d722b7998c07_Frame%201.png,justin-dorfman
"Curiefense GA (1.3.0) Released: Project joins CNCF Sandbox, launches new learning platform, and more",curiefense-ga-1-3-0-released-project-joins-cncf-sandbox-launches-new-learning-platform-and-more-0,603dd3b188409445e6274adc,603dd3b188409439bb274b92,Mon Mar 01 2021 17:09:44 GMT+0000 (Coordinated Universal Time),Mon Mar 01 2021 20:33:44 GMT+0000 (Coordinated Universal Time),,"<p>Curiefense is now in GA! üéâ The <a href=""https://docs.curiefense.io/v/1.3.0/installation/getting-started-with-curiefense"">latest version</a> (1.3.0) is now available for deployment. A lot has happened since the initial release of v1.0 in November, and not just in <a href=""https://docs.curiefense.io/v/1.3.0/reference/release-notes"">our changelog</a>. Here are some of the highlights.</p><h3>Joining the Open Source and Cloud Native Communities</h3><p>Curiefense is now a <a href=""https://www.curiefense.io/post/now-a-cncf-sandbox-project"">CNCF Sandbox Project</a>, and we‚Äôre already making substantial progress in conforming the project to CNCF standards.&nbsp;<br></p><p>The project has <a href=""https://bestpractices.coreinfrastructure.org/en/projects/4576"">earned the CII Best Practices Badge</a> from the Linux Foundation.<br></p><p>We have launched a podcast: ‚Äú<a href=""https://ctcn.fireside.fm/1"">Committing to Cloud Native</a>.‚Äù Along with discussing news and current events in the community, we‚Äôll be documenting our journey as we integrate Curiefense into the cloud native ecosystem. Hopefully, the lessons we learn along the way can be useful to others who travel this path later.&nbsp;&nbsp;&nbsp;</p><h3>New Interactive Learning Platform</h3><p>Now you can try Curiefense without having to install anything. Our <a href=""https://www.katacoda.com/curiefense/scenarios/getting-started"">first scenario on Katacoda</a> provides you with a live, remotely-accessible environment, and walks you through Curiefense‚Äôs initial deployment, management UI, and dashboards. More scenarios are on the way.</p><h3>Project Transparency and Community Participation</h3><p>Curiefense has been an ‚Äúopen book‚Äù project from day one, and we‚Äôre continuing to make data even easier to access. Recently we have:<br></p><ul><li>Created a <a href=""https://app.databox.com/datawall/3ddf913b2db3bb4f53586ec27aaee63106008ba72"">GitHub Dashboard by Databox</a></li><li>Added <a href=""https://curiefense.devstats.cncf.io/d/8/dashboards?orgId=1&from=now-7d&to=now-1h&refresh=15m"">activity reporting via CNCF DevStats</a></li><li>Created multiple granular channels in the Curiefense Slack workspace, making it easier to follow and participate in specific parts in the project. Slack members can interact with project maintainers, and can also subscribe to our realtime GitHub repository feed.<br></li></ul><figure class=""w-richtext-figure-type-image w-richtext-align-center""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d1f417e492c8d476094cf_8TxW2CC76Y5PPK724sbfuKUYj45-nKtkomQVjv0NG2n38a6ajhYrzbA_FNlDX5ud8BkafIweJ7uor_WF-dvSTDsDmmyWK3lXOK180j2rFOT3XaHK3MClYjtVrAARmPVMBMFrFt27.png"" width=""auto"" height=""auto"" loading=""auto""></div></figure><p><br></p><p>To join the Curiefense workspace on Slack, just email <a href=""mailto:community@curiefense.io"">community@curiefense.io</a> for an invite.<br></p><p>To follow us elsewhere, Twitter (<a href=""https://twitter.com/curiefense"">https://twitter.com/curiefense</a>) is our most-used social media channel. If you prefer email, we also have a <a href=""http://eepurl.com/hnnmpj"">newsletter</a>.&nbsp;</p><h2>Fun Stuff</h2><p>To celebrate our launch, we now have <a href=""https://github.com/curiefense/media/blob/main/README.md#-wallpaper"">Curiefense wallpaper</a> available for your <a href=""https://github.com/curiefense/media/blob/main/README.md#-wallpaper"">desktop</a> and/or <a href=""https://github.com/curiefense/media/blob/main/README.md#-zoom-virtual-backgrounds"">Zoom</a>. Stay tuned for shirts and stickers, coming soon!</p><h2>All Are Welcome!</h2><p>Curiefense is maintained by <a href=""https://www.reblaze.com/"">Reblaze</a>, which is making significant investments into its development. That being said, Curiefense is a CNCF project, and is vendor-neutral.&nbsp;<br></p><p>We ask anyone who is interested to join us (including competitors). Our goal is to provide the community with a robust cloud native security solution for Envoy Proxy, and all are welcome. The more we work together, the better it will be for everyone.</p><h2>Acknowledgments and Thanks</h2><p>The Curiefense team would like to thank:&nbsp;<br></p><ul><li><a href=""https://twitter.com/amye"">Amye Scavarda Perrin</a>, and <a href=""https://twitter.com/cra"">Chris Aniszczyk</a> at the CNCF with onboarding</li><li>Our advisors: <a href=""https://twitter.com/mattklein123"">Matt Klein</a>, <a href=""https://twitter.com/ChrisUeland"">Chris Ueland</a>, Chris Ferreira, James Bynoe, and the rest of <a href=""https://www.curiefense.io/about-us"">the team</a></li><li><a href=""https://twitter.com/g_uist"">Kerollany ‚ÄúGuist‚Äù</a> for her awesome merch designs</li><li>Stephen and Emilia at O‚ÄôReilly for their help with <a href=""https://www.katacoda.com/curiefense"">our Katacoda scenarios</a></li></ul>",,,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603d4cb85cb5d722b7998c07_Frame%201.png,
Now a CNCF Sandbox Project,now-a-cncf-sandbox-project,603dd3b188409445e6274adc,603dd3b18840945cc8274b91,Thu Feb 18 2021 17:54:12 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 05:23:26 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>We‚Äôre delighted to announce that Curiefense has been accepted as a CNCF Sandbox Project!</p><p>The <a href=""https://www.cncf.io/"" target=""_blank"">Cloud Native Computing Foundation</a> is the home for many of the fastest-growing open source projects, including Kubernetes, Prometheus, and Envoy. It has hundreds of members, including all of the world‚Äôs largest software and cloud computing companies. In a nutshell, it is the center of development for the cloud native ecosystem.</p><p>We‚Äôre excited to make this announcement, for several reasons. First, as a Sandbox Project, Curiefense will be expected to progress toward compliance with CNCF standards.&nbsp;</p><p>These requirements are strenuous, and rightfully so; the CNCF ecosystem is vendor-neutral, made up of technologies that are open, accessible, resilient, manageable, and observable.&nbsp;</p><p>We‚Äôre eager to bring Curiefense into conformance with the CNCF criteria‚Äînot for the purpose of earning a badge or some other form of recognition from the community, but simply because it will make Curiefense better. Work is already underway toward this goal.&nbsp;</p><p>We‚Äôre also excited for a second reason: being a Sandbox Project will bring Curiefense to the attention of the cloud native community. (Indeed, one of the Sandbox‚Äôs <a href=""https://www.cncf.io/sandbox-projects/"" target=""_blank"">goals</a> is to ‚Äúencourage public visibility‚Äù of its projects.) As stated in our <a href=""https://www.curiefense.io/manifesto"" target=""_blank"">Manifesto</a>, we believe that:</p><blockquote>Open source software and open standards have proven to surpass proprietary technology by all measures; they are the turbine behind the exponential growth of the Internet. Security is a critical aspect of running an online platform, and it deserves the best tools possible; therefore, open source is a better choice than a closed, proprietary ""patented"" one. Collaboration with the vast communities of Envoy, Kubernetes, and other cloud native products will bring in opinions and ideas from some of the brightest minds, and will improve the product and its performance.</blockquote><p>In short, being part of the Sandbox will help us to improve Curiefense in ways that wouldn‚Äôt necessarily have happened on their own, and this helps us to serve our users better.</p><p>Lastly, every CNCF project is meant to contribute towards the Foundation‚Äôs mission, which is to ‚Äúmake cloud native computing ubiquitous‚Äù‚Äîa mission which we wholeheartedly support.</p><p>We believe that the cloud native community can benefit from a robust, inherent set of web security technologies: a comprehensive, transparent, private, and scalable platform that‚Äôs fully integrated into the ecosystem. Becoming a Sandbox project will help us to provide this for everyone.</p><p><br></p>","Curiefense has been accepted as a Sandbox Project within the Cloud Native Computing Foundation. Here's what this means, now and going forward.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/602ea960aae4f67ad3e8b8cf_CNCF-Sandbox.jpeg,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603dcbc5c1dd61e9be343884_sandbox.jpg,spiros-psarris
Hostile Bot Detection Part 2: How Curiefense Does It,hostile-bot-detection-part-2-how-curiefense-does-it,603dd3b188409445e6274adc,603dd3b18840947737274b90,Thu Feb 04 2021 16:43:09 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:12:11 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:12:19 GMT+0000 (Coordinated Universal Time),"<p>In the previous article on this topic, we discussed:</p><ul><li>Why it‚Äôs so important to have a reliable method of filtering hostile bot traffic</li><li>Why reCAPTCHA has become such a popular service for providing it</li><li>And the problems with reCAPTCHA, including its privacy issues, suboptimal UX, and lack of effectiveness against modern attack tools.</li></ul><p>Now in this article, we‚Äôll discuss how Curiefense solves this problem.</p><h2>Multiple Detection Mechanisms</h2><p>Curiefense approaches bot management from multiple angles, and uses a series of filters to block malicious bots. They are:</p><ul><li>Threat feeds</li><li>Rate limiting&nbsp;</li><li>ACLs (Access Control Lists)</li><li>Session Flow Control</li><li>Browser verification (for sites and web apps)</li><li>Client verification (for mobile app traffic)</li><li>Biometric behavioral analysis</li></ul><p>These are applied in a multi-stage sequence. To increase performance, low-overhead methods are applied first. Only traffic that passes the initial filtering is subjected to the more computationally demanding methods. It is very difficult for any forms of automated traffic to pass through the entire sequence.</p><h2>Threat Feeds</h2><p>Curiefense consumes threat intelligence feeds, such as lists of IPs and ASNs currently being used by threat actors. Incoming requests from known-hostile sources can be identified and blocked.</p><p>Of the various mechanisms Curiefense uses, this is the simplest. It obviously won‚Äôt detect hackers who are using advanced tactics (like abusing cellular gateways to access ‚Äòclean‚Äô IPs).&nbsp;</p><p>But it will eliminate a large amount of easily-detected hostile requests with minimal processing. For example, if your service is getting traffic from an IP on the Spamhaus DROP list, there‚Äôs no reason to waste extra CPU cycles on analyzing it.</p><h2>Rate Limiting</h2><p>Many bot attacks require a large number of requests to be sent to the targeted system. Common examples are stuffing credentials into login forms, payment card validation, and other types of brute-force attacks.</p><p>Curiefense can be configured to count requests that match specific characteristics (e.g., requests from the same traffic source, or that have a specific header, and so on). A traffic source can be blocked when it submits too many requests within a configured time.</p><p>This mechanism doesn‚Äôt attempt to identify bots by their characteristics; rather, it blocks hostile traffic (whether bot or human) based on the behavior of the sender. In practice, this winds up filtering mostly bot traffic, since a lot of bot-based attacks are volumetric.</p><h2>ACLs&nbsp;</h2><p>Curiefense admins can configure the system to reject traffic based on a variety of characteristics. Common examples are Tor browser users, anonymous proxy users, requests originating from a public cloud IP, and so on.&nbsp;</p><p>Depending on the ACLs that are chosen, typically a large portion of the excluded requests are sent by bots.</p><h2>Session Flow Control</h2><p>This is another behavioral mechanism.&nbsp;</p><p>Many applications have a natural flow to the requests that the server receives. For example, when someone visits a page in a web application, the server might receive a number of GET requests. Then as the user interacts with the page, a POST request is sent.&nbsp;</p><p>Often, hostile bots will not follow this sequence. For example, a bot might attempt an ATO (account takeover) by going to a login page and submitting a number of POST calls, without previously sending any GETs.</p><p>Curiefense can be configured to enforce request sequences within a session. Any bot (or for that matter, human) who submits out-of-sequence requests can be blocked.</p><h2>Browser Verification (for sites and web apps)</h2><p>A common way for detecting bots is to verify that the visitor is using a legitimate browser (Chrome, Firefox, Safari, etc.) instead of a headless browser or emulator.</p><p>Threat actors know this, of course. As a result, many modern bots masquerade as human visitors using legitimate browsers. Unfortunately, many commercial security solutions cannot detect that this is being done.</p><p>Curiefense offers optional browser verification capabilities that go beyond the techniques used by most commercial solutions. For example, it injects subtle errors into the browser environment, and sees how the ‚Äòbrowser‚Äô reacts. Curiefense knows the exceptions that are thrown by legitimate browsers (with the claimed version, screen resolution, width, etc.). Other reactions are anomalous, and indicate that this ‚Äòvisitor‚Äô is probably a bot.</p><h2>Client Verification (for mobile apps)</h2><p>Mobile/native apps have no browser environment to verify. However, they present a different opportunity for client verification.&nbsp;</p><p>Curiefense offers an optional SDK for iOS and Android apps. The apps are rebuilt and published with the SDK embedded. In use, the SDK signs the application, authenticates the device, hardens all communication, and verifies user identity.&nbsp;</p><p>This provides a reliable, secure mechanism to verify that the packets are originating from a legitimate user, and not from an emulator or other bot.</p><h2>Biometric UEBA analysis</h2><p>Curiefense offers an optional Biometric Behavioral Analysis capability. It uses Machine Learning and UEBA (User and Entity Behavioral Analytics) to construct behavioral profiles of legitimate users and how they interact with the protected applications. Attempts at anomalous usage can then be detected and blocked.</p><p>This is similar to the Session Flow Control described earlier, but much more extensive and sophisticated. Instead of relying upon an admin to define a profile, Curiefense does it automatically, based upon a much wider range of parameters. They include:</p><ul><li><strong>Device and software data</strong> (the user‚Äôs hardware, its screen resolution and orientation, the software used, battery level, stack trace, fronts and extensions, emulator detection, window size, hidden iframes, etc.)</li><li><strong>User interface and events</strong> (mouse/pointer movements, clicks, taps, zooms, scrolls, keystrokes, speed of entry, etc.)</li><li><strong>Session data</strong> (requests sent, timing, frequency, etc.)</li><li><strong>Consumption analytics</strong> (pages viewed, time spent, resources requested, etc.)</li><li><strong>Application-specific events</strong>, and other results of user actions.</li></ul><p>Threat actors have no access to this data, or the profiles that are created from them. This makes the profiling extremely resistant to reverse-engineering. Note too that the only way for a threat actor to avoid this form of filtering is to avoid any activities that a legitimate user would not do. In other words, for hostile actors to avoid being blocked, they cannot perform any hostile actions.</p><h2>Conclusion</h2><p>In the early days of CAPTCHA and then reCAPTCHA, these technologies provided useful benefits to organizations on the web. However, reCAPTCHA is no longer the best way for automatically blocking hostile bot traffic. These two articles have illustrated the differences between reCAPTCHA and Curiefense‚Äôs bot filtering.&nbsp;</p><p>Curiefense detects bots without relying on any interactions with a human visitor. All of the techniques it uses are accomplished in a few milliseconds, and much of the processing (such as the browser verification) only occurs once, at the beginning of a session.</p><p>Of course, threat actors will continue to refine their techniques and attack tools. At the same time, we‚Äôre continuing to improve Curiefense. We have a variety of new features on the way, and more are planned beyond those.</p><p>If you are a security enthusiast, devops engineers, etc. and want to know more about Curiefense, or if you‚Äôd like to file bugs or feature requests, feel free to reach out via our <a href=""https://github.com/curiefense/curiefense"">GitHub</a>. We‚Äôd love to hear from you!</p>","The previous article on Hostile Bot Detection discussed why it is so important, and the problems with using reCAPTCHA for this. Now in part 2, we'll discuss how Curiefense identifies and filters malicious bots.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/601c2bd79280408f70e0caa1_ACL-Policies-2-cropped.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/603dd712eaaf7b698537311a_hostile-bot.jpg,spiros-psarris
Hostile Bot Detection Part 1: Replacing reCAPTCHA,hostile-bot-detection-part-1-replacing-recaptcha,603dd3b188409445e6274adc,603dd3b188409450d0274b8f,Thu Jan 28 2021 06:02:08 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 05:25:47 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>Bot detection is crucially important for any organization with a web presence. Almost all attacks involve automated traffic in one form or another, and excluding hostile bots is a vital part of good security.</p><p>Some malicious bots are easy to detect and block. (<em>‚ÄúWe‚Äôre getting ping floods from a few IPs in China.‚Äù</em>) But others can be much more subtle. (<em>‚ÄúWe‚Äôre getting failed login attempts from a cellular IP in the US. Is this a user who forgot their password, or is it a bot attempting an account takeover?‚Äù</em>)</p><p>Organizations need a reliable way to filter out bots from their traffic. Today, many use Google‚Äôs reCAPTCHA service. Its promise is very attractive‚Äîjust add it to your site, and it will automatically screen out bots. Only human visitors will be let through.</p><p>reCAPTCHA is very popular, but it is far from ideal. In fact, a growing number of organizations are removing it from their sites and apps. This is due to a number of issues, including privacy, user experience, and effectiveness.</p><p><strong>Privacy</strong>. Across the web today, there‚Äôs a growing backlash against the tracking of user behavior. More and more, reCAPTCHA is finding itself in the crosshairs.&nbsp;</p><p>reCAPTCHA is <a href=""https://www.google.com/recaptcha/about/"" target=""_blank"">used on four million sites</a>, including <a href=""https://trends.builtwith.com/widgets/reCAPTCHA"" target=""_blank"">40 percent of the top 10,000</a>. Webmasters are encouraged to install it on <em>every page</em> of their sites. This gives Google an unprecedented opportunity to collect data on browsing behavior as users move across the web.&nbsp;</p><p>It also potentially allows the tracking and identifying of individual users. Some researchers have said that this could be happening; they note that reCAPTCHA seems to operate differently when they browse anonymously, compared to when they are logged into their Google accounts. If this is true, Google could be using its cookies to connect browsing-habit data with individual user accounts. Note too that web users cannot opt out of whatever reCAPTCHA is doing on the sites that they visit.</p><p>We don‚Äôt know for sure if any of this is occurring, but that‚Äôs the problem. Although many people would like to understand reCAPTCHA‚Äôs behind-the-scenes behavior, Google provides few details about it. Thus, many webmasters are concluding that the prudent course of action is to assume the worst, and to start looking for alternatives.</p><p><strong>User Experience</strong>: Early versions of reCAPTCHA presented puzzles to web users. The latest version (v3) is supposed to operate invisibly most of the time. Nevertheless, it still sometimes interrupts user sessions with its challenges. This introduces friction and degrades the UX.</p><p><strong>Effectiveness</strong>: Despite the compromises described above, many organizations would still accept these drawbacks as long as reCAPTCHA could reliably exclude automated traffic from their sites. Unfortunately, this is no longer the case.&nbsp;</p><p>For example, researchers have shown that <a href=""https://ui.adsabs.harvard.edu/abs/2019arXiv190301003A/abstract"" target=""_blank"">Reinforcement Learning can be used to defeat reCAPTCHA v3</a> with more than a 90 percent success rate. There‚Äôs even a <a href=""https://github.com/dessant/buster"" target=""_blank"">browser extension that can solve reCAPTCHAs</a>. reCAPTCHA is still effective against simple bots, but hackers who are willing to use more sophisticated tools can bypass it.</p><h2>Seeking Alternatives</h2><p>Because of the issues surrounding reCAPTCHA, many organizations are now seeking other services to replace it. Unfortunately, most of these have problems of their own. For example, hCaptcha has a more intrusive UX, and many people object to its business model of farming and selling visitor brain-cycles. (It requires visitors to review machine-learning datasets.)</p><h2>Curiefense: Private and Invisible Bot Filtering</h2><p>Clearly, something is needed that can provide the benefits promised by reCAPTCHA while avoiding its problems.</p><p>As an Envoy extension, Curiefense can build traffic filtering directly into containers, service meshes, and so on. Since bot detection is such an important component of web security today, we wanted Curiefense to provide hostile bot management that‚Äôs just as automated as reCAPTCHA. In other words, once it‚Äôs installed, it needs to just work.&nbsp;</p><p>At the same time, we wanted it to avoid reCAPTCHA‚Äôs issues. So, Curiefense‚Äôs bot detection needs to be:</p><ul><li>Private</li><li>Invisible to the visitor at <em>all</em> times</li><li>And effective.</li></ul><p>Of these goals, privacy was the easiest, since it‚Äôs inherent to Curiefense‚Äôs architecture. Unless you explicitly share Curiefense‚Äôs data with a third party, nobody else has access to it.</p><p>Invisibility is a more challenging design constraint, but we knew it was worth the effort. In fact, this approach increases security. When a web visitor can‚Äôt interact directly with a security mechanism, it makes it much more difficult for a threat actor to reverse-engineer it. (For that matter, attackers have no way of knowing that Curiefense is even being used.)</p><p>That leaves effectiveness, which of course is the most important aspect, and is also a major challenge. Modern bots can be quite sophisticated, and the latest generation of tools can do a credible job of mimicking human visitors.&nbsp;</p><p>In Part 2, we‚Äôll discuss how Curiefense tackles this problem. Stay tuned!</p><p><br></p>","reCAPTCHA is a popular service for automatically excluding bots, but there is a growing dissatisfaction over its UX, effectiveness, and potential lack of privacy. For organizations seeking an alternative, what is available to replace it?",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/6012529dad89fd4e8662609b_Recaptcha-600px.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/6012529dad89fd4e8662609b_Recaptcha-600px.png,spiros-psarris
"API Security, Part 3",api-security-part-3,603dd3b188409445e6274adc,603dd3b18840947fc8274b8e,Thu Jan 21 2021 06:01:10 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 05:26:00 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>The first article in this series (<a href=""https://www.curiefense.io/post/api-security-part-1"">API Security, Part 1</a>) discussed some of the challenges in protecting APIs from hostile traffic, and gave an overview of Curiefense‚Äôs approach. The second article (<a href=""https://www.curiefense.io/post/api-security-part-2"">API Security, Part 2</a>) discussed these security mechanisms:</p><ul><li>API Discovery</li><li>Identity-Based Filtering</li><li>Mobile Client Authentication</li><li>Rate Limiting</li></ul><p>In this third and final article, we‚Äôll discuss these additional mechanisms:</p><ul><li>API Session Flow Control</li><li>Behavioral Profiling and API Abuse Prevention</li><li>Content Filtering</li><li>Hostile Bot Detection</li><li>Deep Packet Inspection<br></li></ul><h2>API Session Flow Control</h2><p>Most APIs have a natural, organic flow to them. For legitimate users, there will usually be some calls that occur early in a session, then others will occur afterwards. Many calls will have a specific sequence to them.</p><p>For example, a mobile app might begin with a lot of GET calls, as it initializes and retrieves data. Then once initialization is complete, it might send a POST call containing the user‚Äôs login details.</p><p>Often, attackers will not follow this sequence. For example, a hostile bot might attempt an ATO (account takeover) by jumping straight into a series of POST calls as part of a credential stuffing attack.</p><p>Curiefense can block out-of-sequence calls to an API. The screenshot above shows an example that will not permit a POST call unless it was preceded by a GET to /login.html, followed by a GET to /static/login-form.js.</p><p>In a later release, Curiefense will not only allow admins to define flow control sequences, it will also analyze past behavior and recommend new sequences for enforcement.</p><h2>Behavioral Profiling and API Abuse Prevention</h2><p>Curiefense has optional modules that use Machine Learning (ML) and UEBA (User and Entity Behavioral Analytics) to learn behavioral patterns and other biometric characteristics of legitimate users. Attempts at anomalous usage can be blocked, or merely flagged for monitoring.&nbsp;</p><p>After an initial period of learning and accumulation of usage data/metrics, Curiefense‚Äôs ML-based UEBA can detect complex, application-specific attacks: everything from inventory denial attacks on travel and ecommerce applications to SMS spam being sent through telecom APIs.<br></p><h2>Content Filtering</h2><p>Curiefense admins can set up security policies that define acceptable content for API calls (their headers, payloads, etc.).</p><p>These policies are flexible. Admins can <strong>ban</strong> calls with defined characteristics, or <strong>allow</strong> calls with defined characteristics, or <strong>require</strong> calls to have defined characteristics, or any combination of the above across an API.</p><h2>API Schema Enforcement</h2><p>Content filtering can be used for API schema enforcement. In the current version of Curiefense, partial semantic schema validation is available by creating PCRE definitions for parameter properties.&nbsp;</p><p>A later release of Curiefense will offer full validation via <em>cloud functions</em>: custom Lua code that can be executed during processing.<br></p><h2>Hostile Bot Detection</h2><p>Many traditional security solutions offer bot management only as an add-on module, if it is available at all. We believe this is unfortunate, because almost all web attacks today involve bot activity in one form or another.&nbsp;</p><p>So, when designing Curiefense, we wanted bot management and hostile bot detection to be inherent capabilities of the platform.</p><p>Curiefense allows users to exempt specific bots (e.g., search engine spiders) from filtering if desired. It also includes features for detecting hostile automated traffic, such as consumption of data feeds containing geolocations and IPs known to be used by malicious bots.&nbsp;</p><p>One of our design goals was to provide human detection that doesn‚Äôt require users to do anything (like solving a CAPTCHA puzzle, for example). As a result, Curiefense includes challenge mechanisms to invisibly recognize bots which are using headless browsers or emulators, and they take only a few milliseconds to accomplish at the beginning of a session.&nbsp;</p><p>Behavioral profiling and API abuse prevention (which were described earlier) also play a large role in bot detection, since most attacks today involve bots to varying degrees.&nbsp;<br></p><h2>Deep Packet Inspection (WAF)</h2><p>Along with everything else described so far, Curiefense includes‚Äîof course!‚Äîa WAF.&nbsp;</p><p>This defends against injection attempts (of SQL, code, and commands), XSS, out-of-limit arguments, malicious payloads, protocol exploits, cookie and session poisoning, and more. Basically, everything that a WAF should defend against.</p><p>Out of the box, Curiefense includes an extensive database of threat signatures. In addition to this, users can also construct custom API filters to allow or block requests based on their content (as described earlier), and then assign these filters to various scopes (from globally across the API down to specific destination endpoints).&nbsp;</p><p>Automation features include regular updates to the threat signature database, and a default security profile that protects every path/endpoint which hasn‚Äôt been explicitly configured.&nbsp;</p><p>More info: <a href=""https://www.curiefense.io/post/the-curiefense-waf"">the Curiefense WAF</a>.<br></p><h2>Conclusion</h2><p>API security is simultaneously one of the most challenging and most important tasks in cybersecurity today. Today‚Äôs threat environment includes a wide variety of methods for compromising systems via their APIs; meanwhile, legacy security solutions often rely on techniques (such as browser environment identification) which are not applicable to APIs.</p><p>We designed Curiefense from the ground up to provide APIs with robust protection. It offers the same range of security technologies to services and microservices as it does to sites and apps, and it offers additional API-specific mechanisms as well.&nbsp;</p><p>We believe that Curiefense already offers API security that is at least equal to, and often better than, most solutions available today. However, we aren‚Äôt done yet; as mentioned above, there are more features coming.&nbsp;</p><p>Please feel free to send us your ideas, feedback, and feature requests. We‚Äôd love to hear from you!</p><p><br></p>","This article continues the discussion of API security mechanisms, including session flow control, behavioral profiling, content filtering, hostile bot detection, and deep packet inspection.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/6009189af697d71e882e4516_Flow-Control.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/6009189af697d71e882e4516_Flow-Control.png,spiros-psarris
Adding Web Security to Envoy,adding-web-security-to-envoy,603dd3b188409445e6274adc,603dd3b1884094ef1e274b8d,Mon Jan 11 2021 02:20:57 GMT+0000 (Coordinated Universal Time),Mon Jan 11 2021 15:26:44 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>As <a href=""https://www.envoyproxy.io/"" target=""_blank"">Envoy</a> continues to grow and becomes more widely adopted, a natural next step is to leverage its inherent extensibility to add security capabilities.</p><p>Robust security is obviously a vital requirement for any cloud-native organization today. Threat actors are well-financed, highly skilled, and relentless. Meanwhile, organizations continue to deploy more apps, services, and APIs, thus continuing to expand their attack surfaces.</p><p>The commercial market offers many security solutions which can filter and block hostile requests within incoming traffic. However, these are all proprietary, closed-source products. For users who prefer open solutions, this situation is obviously not ideal.&nbsp;</p><p>To make matters worse, most proprietary solutions run outside of the user‚Äôs perimeter. This means that the traffic stream must be routed to the vendor‚Äôs infrastructure, decrypted, analyzed, and then re-encrypted before it can be sent to the user‚Äôs environment. Not only does this introduce additional latency, it also exposes the user‚Äôs data and metrics to a third party, creating a severe compromise of privacy.</p><p>Envoy gives us an opportunity to solve all these problems.</p><p>Envoy is ideally positioned to perform as a web security mechanism. It can filter traffic at various scales; it can be used as an ingress gateway for an entire environment, or to filter traffic for individual microservices, or anything in-between. It does so with an L3/L4 architecture, processing traffic on a byte-by-byte basis‚Äîwhich allows application-layer processing to be added on top.&nbsp;</p><p>Most importantly, it‚Äôs extensible. It‚Äôs designed to be easily augmented with additional capabilities, such as web security.&nbsp;</p><p>However, adding security is a non-trivial undertaking. Today‚Äôs threat environment is broad and diverse; an Envoy security extension would need internal logic that could analyze traffic in multiple ways, in order to identify the many different types of possible attacks. This analysis would need to be stateful, not only within sessions but also across traffic sources. (While some attacks‚Äîfor example, SQL injection‚Äîcan be detected within individual requests, other types of attacks are waged using a series of requests that individually seem to be benign.)&nbsp;</p><p>Also, the threat environment is constantly evolving. Therefore, this extension would need to consume threat intelligence feeds, and be able to automatically update its security posture as new threats emerged.&nbsp;</p><p>Furthermore, Envoy is known for having best-in-class observability, so a security extension should be consistent with this. Users should be able to see everything that is happening within their environments, and to understand all the traffic-filtering decisions that are being made, and why.&nbsp;</p><p>Lastly, this extension would need to support cloud-native practices, and work well within the ecosystem. Ideally, it would be open source.&nbsp;&nbsp;<br></p><h2>Curiefense: a security extension for Envoy</h2><p>Curiefense (<a href=""https://www.curiefense.io/"">https://www.curiefense.io/</a>) is an OSS Envoy extension designed according to these requirements.&nbsp;</p><p>Curiefense (named after the famous scientist <a href=""https://www.curiefense.io/marie-curie"" target=""_blank"">Marie Curie</a>) adds a broad set of automated web security tools to Envoy: WAF, DDoS protection, bot management, API security, rate limiting, session flow control, and more. It includes capabilities that rival, and in many cases exceed, those of commercial closed-source security solutions.</p><p>Using an Envoy extension to filter traffic makes external third-party solutions unnecessary, because security can be baked into the environment itself. This means that cloud-native organizations will no longer need to compromise on issues such as latency, openness, vendor lock-in, or privacy.&nbsp;&nbsp;&nbsp;</p><p>Curiefense is being submitted for sandboxing within the CNCF ecosystem. The project is meant to provide a GitOps platform that is open, extensible, adaptive and evolving‚Äîone that provides robust security while still preserving total privacy for its users.&nbsp;</p><p>We‚Äôre eager to <a href=""https://github.com/curiefense/curiefense/discussions"">receive feedback, opinions, and ideas from the community</a>, to help us make Curiefense a better tool for everyone. Feel free to reach out via our <a href=""https://github.com/curiefense/curiefense/"">GitHub</a>.</p><p><br></p><p><br></p><p><br></p>","As Envoy Proxy continues to grow and becomes more widely adopted, a natural next step is to add security capabilities. Curiefense leverages Envoy's extensibility and flexibility to provide traffic filtering for a wide variety of use cases.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5ffbb5fec6f932ae75bf2758_DDOS-04.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5ffbb5fec6f932ae75bf2758_DDOS-04.png,
"API Security, Part 2",api-security-part-2,603dd3b188409445e6274adc,603dd3b18840941e0b274b83,Tue Jan 05 2021 04:50:01 GMT+0000 (Coordinated Universal Time),Tue Jan 05 2021 04:54:44 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>The previous article (<a href=""https://www.curiefense.io/post/api-security-part-1"">API Security, Part 1</a>) discussed some of the challenges in protecting APIs from hostile traffic, and gave an overview of Curiefense‚Äôs approach. Now in this article, we‚Äôll discuss these security mechanisms:</p><ul><li>API Discovery</li><li>Identity-Based Filtering</li><li>Mobile Client Authentication</li><li>Behavior Enforcement</li><li>Rate Limiting<br></li></ul><h2>API Discovery</h2><p>(This feature is pending in the next release of Curiefense.)&nbsp;</p><p>The Profiling mechanism (discussed <a href=""https://www.curiefense.io/post/an-intuitive-system"">here</a>) includes a default ruleset to identify API usage. If you customize it to match your APIs, as shown in the UI screenshot above, it creates an easy way to identify incoming calls. </p><p>This has several uses, including:</p><ul><li>The ability to assign specific security policies only to API traffic.</li><li>The ability to use Curiefense for performing API Discovery. You can look at your Grafana dashboard and easily see all the incoming API traffic in one snapshot.&nbsp;<br></li></ul><h2>Identity-Based Filtering</h2><p>Curiefense can block API calls based on the identity of the caller. Examples:</p><ul><li>Anonymous proxy and VPN users</li><li>Tor users</li><li>Calls originating from a public cloud IP</li><li>Calls originating from an ASN on the current Spamhaus DROP list</li></ul><p>Curiefense can also exempt API calls from filtering based on defined characteristics. Example: calls coming from internal IPs.<br></p><h2>Mobile Client Authentication</h2><p>Mobile/native apps present an interesting situation. On the one hand, they are API clients, and so they will be secured by the usual filtering of API traffic. However, we realized that these apps present an opportunity for additional protection.</p><p>As a result, Curiefense offers an optional SDK for iOS and Android apps, which are rebuilt and published with the SDK embedded. In use, the SDK signs the application, authenticates the device, hardens all communication, and verifies user identity.&nbsp;</p><p>This provides a reliable, secure mechanism to verify that the packets are originating from a legitimate user, and not from an emulator or other bot.<br></p><h2>Behavior Enforcement&nbsp;</h2><p>This category includes several different mechanisms, including rate limiting, API session flow control, and behavioral profiling / API abuse prevention.<br></p><h2>Rate Limiting</h2><p>You can configure Curiefense to block all API calls that exceed a specific limit within a certain period of time.&nbsp;</p><p>(‚ÄúLimit‚Äù usually refers to the number of calls made by a traffic source, but it can also be defined as the number of calls made with a specific header, cookie, argument, attribute, etc.)</p><p>This mechanism protects APIs against a wide variety of attacks, including:&nbsp;</p><ul><li>DDoS</li><li>ATO (Account Takeover) attempts using credential stuffing, brute-force credential discovery, and so on</li><li>payment card validation and discovery</li><li>data and content scraping&nbsp;</li><li>input fuzzing</li><li>enumeration</li><li>API reverse engineering</li><li>Every other attack that relies upon a significant volume of calls</li></ul><h2>Coming Up Next</h2><p>In the final article in this series, we‚Äôll discuss API session flow control, behavioral profiling, content filtering, hostile bot detection, and deep packet inspection.<br></p>","Curiefense includes a number of security mechanisms for defending APIs against hostile traffic. This article discusses API Discovery, Identity-Based Filtering, Mobile Client Authentication, Behavior Enforcement, and Rate Limiting.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5ff3efe4ec5ad4dedf4e1b6b_API-Discovery-cropped.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5ff3efe4ec5ad4dedf4e1b6b_API-Discovery-cropped.png,
"API Security, Part 1",api-security-part-1,603dd3b188409445e6274adc,603dd3b1884094cec9274b70,Wed Dec 30 2020 18:30:26 GMT+0000 (Coordinated Universal Time),Wed Dec 30 2020 18:44:42 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>API security is increasingly important on the web today, thanks to microservice architectures, mobile apps, and other growing trends. It‚Äôs a broad subject, and includes requirements such as:&nbsp;</p><ul><li>Secure coding practices (e.g., input validation)&nbsp;</li><li>Authentication, authorization, and access control</li><li>Monitoring and analytics (which are necessary for API Management)</li><li>API Discovery (also part of API Management)</li><li>Detecting and blocking malicious/abusive calls to an API.&nbsp;</li></ul><p>The last requirement (preventing API abuse) is an especially complicated task. Endpoints are subject to a wide variety of malicious activities: hostile bots, volumetric attacks, SQL/code injection attempts, and so on.&nbsp;</p><p>As an Envoy plugin, Curiefense focuses on HTTP traffic filtering; it detects and blocks threats within the incoming requests sent to an endpoint. Before discussing them, let‚Äôs talk about API protection in general.<br></p><h2>Challenges in Protecting APIs</h2><p>Many security solutions don‚Äôt protect APIs to the same degree as they do for web applications. There are a couple of reasons for this.</p><p>First, in the early days of the web, APIs were less important than they are today. Few security solutions were designed with them in mind, and so API security features tended to be added on later. With Curiefense, we didn‚Äôt have this problem; we had the opportunity to build in API protection from the ground up.&nbsp;</p><p>The second issue is that APIs have some unique security requirements, compared to web apps. Some of the conventional techniques used to secure app traffic don‚Äôt work for APIs. For example, a traditional way to detect hostile bots is to verify the user‚Äôs browser environment‚Äîbut for an API user, there is no browser to verify.</p><p>Here‚Äôs how Curiefense addresses these challenges.<br></p><h2>tl;dr: APIs Get Equal Treatment and Full Protection</h2><p>Curiefense protects all forms of traffic equally. Calls to a REST API enjoy the same security mechanisms (WAF, DDoS, rate limiting, session control, etc.) as the requests sent to a site or web app.</p><p>So, it defends APIs against the full spectrum of web-based attacks: SQL/code injection, XSS, DDoS, ATO (Account Takeover), app/API abuse, vulnerability scans, payment/gift card fraud, input fuzzing, scraping, etc. etc. etc.<br></p><h2>Workflow and Security Mechanisms&nbsp;</h2><p>All incoming traffic (for web apps, sites, service APIs, mobile/native clients, and so on) is processed using the same tag-based workflow (discussed in-depth in a <a href=""https://www.curiefense.io/post/an-intuitive-system"">previous article</a>), customized for the type of requests being filtered.</p><p>This means that administration is exactly the same for APIs as for web applications. All security rulesets are configured and assigned the same way, regardless of the way they are used. We wanted it to be equally straightforward in all use cases, whether you‚Äôre defining a policy for an individual site URL or you‚Äôre assigning rulesets to all API endpoints that match a specified regex.<br></p><p>Curiefense protects APIs using a variety of security mechanisms. The categories are:</p><ul><li>API Discovery</li><li>Identity-Based Filtering</li><li>Mobile Client Authentication</li><li>Behavior Enforcement</li><li>Content Filtering</li><li>Hostile Bot Detection</li><li>Deep Packet Inspection</li></ul><p>The next two articles in this series will discuss these mechanisms in detail.</p><p>‚Äç</p>","API security is increasingly important on the web today. However, filtering API traffic is, in some ways, quite different than protecting a web application. Here's how Curiefense approaches these challenges.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fecc6e52d254242d5211898_4_sec_layers-02%201200x632.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fecc6e52d254242d5211898_4_sec_layers-02%201200x632.png,
Inspired by Marie Curie,inspired-by-marie-curie,603dd3b188409445e6274adc,603dd3b18840943f08274b5d,Tue Dec 22 2020 07:20:34 GMT+0000 (Coordinated Universal Time),Wed Dec 23 2020 05:18:50 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<figure class=""w-richtext-figure-type-image w-richtext-align-floatleft"" style=""max-width:20%""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fe19cf66bd35227921e2edd_Tamara.jpg"" loading=""lazy"" width=""auto"" height=""auto""></div></figure><p>Hi, my name is Tamara. I work as a data scientist at Reblaze, and I am in love with what I do. I am proud to be part of a team that rocks!&nbsp;</p><p>We recently released a new open-source project: <a href=""https://www.curiefense.io/"">Curiefense</a>*. It is named after the famous scientist <strong>Marie Curie</strong> (<em>n√©e</em> Maria Sk≈Çodowska). Madame Curie‚Äôs life story can be considered as an inexhaustible source of inspiration, not only for me, but for entire generations. Her example has made me grow and develop, and has taught me to never give up. In this article, I'd like to share some facts from her biography that give me power, energy, and enthusiasm to keep on and do what I‚Äôm doing.</p><p>Even as a schoolgirl, Maria was an <strong>extraordinarily hard worker</strong>. She was devoted to studying, sometimes even skipping sleep and food. After graduating school, she worked as a <em>gouvernante </em>(governess) to earn money, so she could move to Paris and study chemistry and physics at the Sorbonne (the University of Paris).&nbsp;</p><p>She lived in spartan conditions in the cold attic of the Latin Quarter, studying and working extremely hard. This produced results: Maria became one of the best students of the university and received two degrees (in physics and mathematics). Her hard work attracted attention, and she was given the opportunity to conduct her own research. Marie Curie eventually became the first woman professor in the history of the Sorbonne.</p><p>When Marie and her husband Pierre Curie (whom she had met at the Sorbonne) discovered a new chemical element‚Äînow known as <em>radium</em><strong>‚Äî</strong>many scientists did not want to believe it. The only way to dispel doubts was to extract a small amount of pure radium from uranium ore, and that was an extremely difficult task. Curie spent years working for free and performing laboratory duties, risking her health and career, and rejecting offers from several universities (in particular, Geneva)<strong> </strong>only because of her belief in the supreme goal.<strong> </strong>Marie had to prove her scientific competence with an incredible work capacity and participation in high-profile debates with other scientists<strong>‚Äî</strong>men who didn‚Äôt skimp on caustic and sarcastic comments about the idea of a woman working in science.</p><p>After discovering two new elements (radium and polonium), Pierre and Marie <strong>shared all their collected knowledge </strong>from their years of research. This contributed vastly to the development of industrial radiography, medicine (including radiologic examinations and cancer treatments), and many other fields.&nbsp;</p><p>Marie <strong>invested </strong>in the founding of several radiological institutes. From our perspective today, she could be named as one of the first practitioners of the Creative Commons principles. (Creative Commons is an American non-profit organization and international network devoted to educational access, and expanding the range of creative works available for others to legally build upon and share.)&nbsp;</p><p>Her influence cast a positive light upon the involvement of women in the fields of physics, chemistry and medicine. She was awarded (jointly with Pierre Curie and Henri Becquerel) the 1903 Nobel Prize in Physics, for their investigations into radioactivity, and also (as the sole recipient) the 1911 Nobel Prize in Chemistry for the discovery of polonium and radium.</p><p>Madame Curie was the first person in history to win two Nobel Prizes, and she remains the only person to become a Nobel Laureate in two different sciences. She was the first of 53 women (as of 2019) to have been awarded a Nobel Prize.&nbsp;</p><p>Many medical centers, universities, buildings, public places, streets and museums are named after her; her life and work are described in many works of art, books, biographies and films.</p><p>Mme. Curie was a member of 85 scientific societies (including the French Medical Academy), received 20 honorary degrees, became a superstar of several fields of science, and contributed to the foundation of the most important radium institutes in Europe. She proved that gender doesn‚Äôt play a role in science, and showed that women can be great scientists. She paved the way for subsequent generations of female mathematicians, physicists, and engineers.</p><p>Speaking of great scientists and engineers... at Reblaze we are always hiring! If you'd like to join my team and work on Curiefense and other exciting projects at the cutting edge of current technology (cybersecurity, data science, machine learning, and more), you can apply to join our team at <a href=""https://boards.greenhouse.io/reblazetechnologies/"">https://boards.greenhouse.io/reblazetechnologies/</a>.</p><p>‚Äç<strong>Curiefense </strong>is an Open-Source Security Platform. We believe that open source is an inherently superior approach to software development and distribution: a powerful way to allow the intellect and talents of entire communities to create better tools, for the benefit of us all. By making it freely available, many organizations will be able to access and use this platform, including some that otherwise would not be able to do so. (from <a href=""https://www.reblaze.com/blog/announcing-curiefense-an-open-source-security-platform/"">https://www.reblaze.com/blog/announcing-curiefense-an-open-source-security-platform/</a>).</p><p><br></p><p><br></p>","Reblaze Data Scientist Tamara Shostak writes about being inspired by Marie Curie and the example she set by her life, work ethic, and extensive accomplishments. ",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fe1a47e716aa856efdf1c47_Marie-Curie.jpg,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fe1a47e716aa856efdf1c47_Marie-Curie.jpg,
The Curiefense WAF,the-curiefense-waf,603dd3b188409445e6274adc,603dd3b1884094819e274b4a,Thu Nov 19 2020 06:27:39 GMT+0000 (Coordinated Universal Time),Thu Nov 19 2020 07:14:08 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>In a previous article, we discussed <a href=""https://www.curiefense.io/post/an-intuitive-system"">Curiefense‚Äôs tag-based real-time traffic processing</a>:<br></p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32c94cb1bfc90e1f891c9_xowYh8ajZe7ixE0LQHI-aqgh6M9X6XXJXrvwqrN4GTIsWIh9UbCi_-Zm7Kkqo6QU2PxDFzk9zoywniNdEQhAtflQ1bD5Pkt1_rZ80-zSWPyvzQCd8CvaXT7IZIDPyV1y_nohX3Fg.png"" width=""auto"" height=""auto"" loading=""auto""></div><figcaption><em>Four stages of real-time traffic processing</em><br></figcaption></figure><p>In the diagram, requests enter from the left and proceed through several stages of evaluation. Those which do not violate any security policies or otherwise exhibit anomalous behavior are allowed through to the protected web resource on the right.</p><p>The last stage of evaluation is the WAF. In the previous article, this was discussed briefly; in this article, we‚Äôll take a closer look.<br></p><p>WAF is an acronym for Web Application Firewall. Often this term is used rather broadly (and imprecisely) to describe a security solution that performs various types of traffic filtering. We‚Äôll use the term here in its narrower, more precise sense: a firewall that blocks malicious HTTP requests.</p><h2>Scope of Protection</h2><p>Curiefense‚Äôs WAF protects against a wide range of attacks: SQL injection, code and command injection, directory traversals, file access attempts, cross-site scripting (XSS), and more. It can detect any malicious activity which can be discerned by inspecting an individual request and its contents (its headers, arguments, etc.)&nbsp;<br></p><p>Traditionally, WAFs have been used to protect sites and web applications. Curiefense‚Äôs WAF can also protect services and APIs, and offers the same set of capabilities for them as it does for sites and apps.</p><h2>The tldr; Curiefense‚Äôs WAF in a nutshell</h2><p>Curiefense includes an extensive and regularly-updated database of threat signatures. By default, it filters every incoming request that matches a signature. However, it is possible to exempt requests from evaluation against one or more specific signatures.<br></p><p>Here‚Äôs an example of why this can be useful. When an incoming HTTP request has a parameter that contains an apostrophe, this usually indicates an attempt at SQL injection. Therefore, Curiefense includes a threat signature that will block this request. However, in some situations, an apostrophe might be valid within certain input parameters. Thus, an administrator can configure Curiefense to exempt those parameters from being evaluated against that signature.<br></p><p>In addition to these built-in threat signatures, Curiefense users can create a wide variety of additional filters. This includes content filtering; users can supply regex patterns which define the allowable structure and content of request parameters.<br></p><p>This capability can be quite powerful. A request that does not match these custom filters can be blocked automatically, or subjected to further scrutiny, depending on the configuration.<br></p><p>Curiefense‚Äôs WAF policies are combined into WAF Profiles, which can be assigned to any scope of paths/URLs within the protected web service. In a typical deployment, there will be a few specific Profiles customized for individual URLs, several additional Profiles for broader paths, and one that applies by default to every URL not otherwise specified.<br></p><p>That‚Äôs the Curiefense WAF in a nutshell. In the remainder of this article, we‚Äôll discuss its traffic filtering in more detail.</p><h2>Approach</h2><p>Curiefense uses both negative security and positive security models:&nbsp;</p><ul><li><strong>Negative security</strong> blocks traffic that matches defined characteristics of malicious traffic, and allows the rest.</li><li><strong>Positive security</strong> allows traffic that matches defined characteristics of legitimate traffic, and blocks the rest.<br></li></ul><p>Each model has strengths and weaknesses. For example, negative security cannot protect against zero-days, while positive security has a higher risk of producing false-positive alarms. Therefore, Curiefense uses both, to leverage their advantages while avoiding their disadvantages. Here‚Äôs how it does this.</p><h2>Capabilities</h2><p>As mentioned above, Curiefense includes an extensive database of threat signatures. They are viewable in the UI, as shown in the following example. (This particular one detects a specific type of SQL injection.)<br></p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb615e73775b86f8648c759_AXA_3FsDLRjqAjqoTrIrhdTJX8wxkDDOSrxZD2uZrra6uYIcx07ACymfdznEtdMdsulviUGtVSz6Kf4AHo28L7fVCXyCtDMuFdZ_ewYlqowWyB4WeDDjU_V49QnVCp_d4JEdC6Sh.png"" width=""auto"" height=""auto"" loading=""auto""></div><figcaption><em>Curiefense includes an extensive list of signatures. This is one of many for detecting various types of SQL injection.</em></figcaption></figure><p>By default, a request which matches any of the threat signatures will be blocked. (This is part of Curiefense‚Äôs negative security model.)<br></p><p>Additional security policies can be defined by administrators. Some of these also use negative security, such as enforcement of maximum limits for the length and number of headers, cookies and arguments.&nbsp;<br></p><p>Other policies use positive security, such as those which define the allowable content of specific parameters (headers, cookies, and/or arguments). Requests which do not match these policies can be blocked.<br></p><p>Some policies use a hybrid approach. For example, regex patterns can be defined for specific parameters, and used as follows:</p><ul><li>If a parameter matches its assigned regex pattern, that parameter is deemed to be legitimate. It is exempted from evaluation against the WAF Signatures.</li><li>If a parameter does not match its regex pattern, that pattern will be evaluated against the WAF Signatures, except for any Signatures that were specifically excluded for that parameter.</li><li>If a parameter does not have a pattern defined, it will be evaluated against all WAF Signatures.&nbsp;<br></li></ul><p>To illustrate this, here‚Äôs a sample set of WAF security policies (known as a WAF Profile) in the Curiefense UI:<br></p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb615e8cbb953b1e851b20c_MEXqHYfQ29cQQnKPLOFhZBWkR6vAEfCcJMdIp0p71tnuX1-nOKCC4UBqJeFEaU0sd3EjoXNdgn1_K45tXS2MOX3ny20uwfHxQ0KZ9Ef4VOl27cl5o-RAb4ZINtTOqig6Q9QzGggs.png"" width=""auto"" height=""auto"" loading=""auto""></div><figcaption><em>A sample WAF&nbsp;Profile.</em></figcaption></figure><p>If this Profile were active for a URL, and an incoming request was received for that URL, Curiefense would iterate through all of the request‚Äôs parameters‚Äîthrough every header, cookie, and argument‚Äîand evaluate each one as follows:</p><ul><li>If that parameter had a length more than 1024, or it exceeded the allowable number of that type of parameter, the request would be blocked. No further processing would occur.&nbsp;</li><li>If the parameter did not have a Matching Value defined (which in the example above means it was any parameter other than a <em>sessionid</em> header or a header beginning with <em>user_</em>), it would be evaluated against the threat signature database. If it matched one of the signatures, the request would be blocked and no further processing would occur. Otherwise, processing would continue with the next parameter.</li><li>If the parameter had a Matching Value definition, and matched it (which in the above example, means it was either a 12-digit <em>sessionid</em> header or an 8-character <em>user_*</em> header), the parameter would be passed, and processing would continue with the next parameter.</li><li>If the parameter had a Matching Value definition but did not match it, Curiefense would respond (depending on its configuration) by either blocking the request (which is the case for the <em>sessionid</em> header in the example), or by evaluating the parameter against all threat signatures, except for any signatures listed in the Exclude Sig field.<br></li></ul><p>Note that Curiefense allows the above processing to be bypassed if desired. The ‚ÄúIgnore Alphanumeric Input‚Äù option instructs the WAF to treat parameters as benign if they contain only alphanumeric characters. This saves processing time, and it can be useful in situations where extensive content filtering is not needed.&nbsp;&nbsp;<br></p><p>For more information on configuring the Curiefense WAF, see the <a href=""https://docs.curiefense.io/console/document-editor/waf-profiles"">documentation</a>.</p><h2>Other Features</h2><p>As shown in the UI screenshot, individual filter rules are combined into a WAF Profile. Profiles can be assigned to paths throughout the protected web service, from globally down to individual URLs. Paths can be specified using regex, which makes it straightforward to administer even complicated deployments.<br></p><p>Lastly, as with every other type of configuration within Curiefense:</p><ul><li>All WAF administration can be done via REST API as well as through the UI.&nbsp;</li><li>All configurations are maintained in a version history. Users can revert to a previous configuration at any time.</li></ul><h2>Final Notes</h2><p>A WAF processes requests, and filters them based on their contents. Many attacks are out of scope for WAF filtering, because the individual requests themselves seem benign. For example, a credential stuffing attack consists of requests that are not overtly malicious‚Äîthey contain no injection attempts, no attempts to access system files, and so on.&nbsp;<br></p><p>Curiefense can handle those types of attacks as well, because it has a robust set of threat detection capabilities that go far beyond WAF filtering. We‚Äôll discuss those capabilities in future articles.<br></p>","Curiefense‚Äôs WAF protects against a wide range of attacks. It includes an extensive database of threat signatures, and users can create custom security policies as well. Here are its capabilities and how to use them. ",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb6190d223a0f4b73236273_hexagon-grid-locked.jpg,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb6191501f604ae8c3403c3_hexagon-grid-locked-opengraph.jpg,
An Intuitive System,an-intuitive-system,603dd3b188409445e6274adc,603dd3b18840941244274b35,Tue Nov 17 2020 01:56:49 GMT+0000 (Coordinated Universal Time),Thu Nov 19 2020 07:18:11 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>A key element of every security system is its ease of use. One of Curiefense‚Äôs core principles (as discussed in the <a href=""https://www.curiefense.io/manifesto"">Manifesto</a>) is simplicity:&nbsp;<br></p><blockquote><em>Simplicity is a vital ingredient in security. Complex systems tend to be abandoned, and complicated processes tend to be avoided. Even worse, a complicated system can be misconfigured, leading to an illusion of security when in fact there are vulnerabilities.<br><br>Our goal is to keep Curiefense effective and simple to use, whether it is an API call, UI interaction, automation procedure, or a foundational concept. Simplicity boosts participation and promotes action. We will always choose to work harder to keep it as simple as possible, regardless of the complexity beneath the surface.</em><br></blockquote><p>Simplicity does not imply a lack of sophistication. On the contrary, Curiefense is designed to provide security powerful enough to handle threats (not only today‚Äôs, but also tomorrow‚Äôs), while still remaining understandable and straightforward to use.<br></p><p>In this article, we‚Äôll discuss a high-level overview of Curiefense‚Äôs traffic filtering. We‚Äôll start with this diagram:</p><p><br></p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32c942d9b8d6e38700495_L84S5piX2Qm7yG46hzlVay2sND93oswbkgl_bpvzyTKfrC4-M0M9g773KyGZPZCxxAmcmWa-G9Tu4OQq0CNp-PjI-YH10bnLkIWdviiJx68_HcTf0_oNJBTicMPu3stYiqdwSuIy.png"" width=""auto"" height=""auto"" loading=""auto""></div><figcaption><em>Two stages of real-time traffic processing</em></figcaption></figure><p><br></p><p>On the left are traffic sources, generating HTTP requests. The requests‚Äô intended destination is the web resource (the site, app, service, or API) at the far right. To get there, they must pass through Curiefense and withstand its scrutiny. Only legitimate traffic is allowed through to the protected resource.<br></p><p>The diagram illustrates two stages of Curiefense: <strong>Profiling</strong> and <strong>ACL Profiles</strong>. We‚Äôll add more stages in a moment, but let‚Äôs discuss these two first.</p><h2>Profiling</h2><p>When Curiefense receives a request, it attaches internal tags to it. The tags will be the basis of subsequent processing in the ACL Profiles.<br></p><p>At this stage, no security policies are being enforced. Curiefense is merely creating a comprehensive profile for this request, by attaching all tags that are applicable to it.<br></p><p>The tags have several sources:</p><ul><li>Automatic generation</li><li>External feeds</li><li>Internal Profiling Lists<br></li></ul><p><strong>Automatic generation</strong>: Curiefense generates many tags automatically. For example, every request receives tags containing its IP address, ASN, geolocation, and several others.<br></p><p><strong>External feeds</strong>: You can subscribe Curiefense to multiple data feeds, and specify tags to be associated with them. For example, the Spamhaus project <a href=""https://www.spamhaus.org/drop/"">provides</a> DROP and EDROP&nbsp; ‚Äúdrop all traffic‚Äù advisory lists of IP addresses and AS numbers, consisting of netblocks that are used by professional spam or cyber-crime operations (for dissemination of malware, trojan downloaders, botnet controllers, etc.). Curiefense can attach an appropriate tag (perhaps ‚Äúspamhaus‚Äù) to every incoming request originating from one of these hijacked/leased IPs. You could also subscribe to a feed containing IP addresses currently being used by VPNs, and attach a ‚Äúvpn‚Äù tag to requests originating from one of them. And so on.</p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2206px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb334be97887168802ec433_Profiling%20Lists%20two.png"" loading=""lazy"" width=""auto"" height=""auto""></div><figcaption><em>The UI for subscribing to an external feed (in this example, Spamhaus DROP) and specifying the tag(s) to attach to requests which match it.</em></figcaption></figure><p>‚Äç<br>Out of the box, Curiefense includes a substantial number of preloaded lists. (Currently, there are 18; more will be added soon.) These are automatically updated each day.</p><p>‚Äç<strong>Internal Profiling Lists</strong>: These are created by Curiefense administrators; they contain sets of criteria and the tags to attach when those criteria are matched. Some examples:</p><ul><li>Attach ‚Äúinternal‚Äù to requests from IPs used by internal teams</li><li>Attach ‚Äúforbidden‚Äù for all HTTP methods except for GET and POST</li><li>Attach ‚Äúdebug‚Äù when the query string includes a <strong>debug</strong> parameter which is <strong>true</strong>.</li><li>Attach ‚Äúgoodcookie‚Äù when the value of a specified cookie matches a regex of valid content. (Or when it <em>doesn‚Äôt</em> match a regex describing forbidden content.)<br></li></ul><p>Profiling lists are a powerful tool. They allow you to define and attach tags depending on the content and characteristics of incoming requests: their headers, cookies, queries, paths, methods, geolocation, and more, with matching conditions specified as regex. For a full description, see the <a href=""https://docs.curiefense.io/console/document-editor/profiling-lists"">Curiefense documentation for Profiling Lists</a>.<br></p><p>Once all tags are attached, it‚Äôs time to use them. That‚Äôs done with ACL Profiles.</p><h2>ACL Profiles</h2><p>Curiefense uses a request‚Äôs tags to enforce security policies. These are defined in an ACL (Access Control List) Profile. An ACL Profile defines the actions to take when certain tags are found, arranged in a sequential order.<br></p><p>Here‚Äôs an example in the Curiefense UI:</p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:2214px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32f8643c37a170d892a44_ACL%20Profiles%20two.png"" loading=""lazy"" width=""auto"" height=""auto""></div><figcaption><em>A sample ACL&nbsp;Profile in the Curiefense UI</em></figcaption></figure><p>‚Äç</p><p>Tags are arranged in columns. The columns are evaluated from left to right; if a request matches a tag in a column, the action for that column is taken.</p><p>For the example above, this is how each request will be processed;</p><ul><li>If the request is tagged with <strong>spamhaus,</strong> <strong>vpn</strong>, or <strong>tor</strong>, block it.</li><li>If the request is tagged with <strong>internal</strong>, allow it and exempt it from further processing.</li><li>If the request is Google's crawler (having been tagged with <strong>googlebot</strong>), exit the ACL process and send the request to the WAF for further evaluation.</li><li>If all tags have been evaluated but no matching ACL actions were found, subject the requestor to a <a href=""https://docs.curiefense.io/reference/the-challenge-process"">bot challenge</a> to verify this is a human user and not a bot. If the requestor fails the challenge, block it; otherwise, send the request to the WAF for further evaluation.</li></ul><p>In the diagram above are two additional columns, which aren't used in this example. Their actions are:</p><ul><li>Send the request to the WAF for evaluation without a bot challenge.</li><li>Block the request.<br></li></ul><p>A live deployment of Curiefense will usually have multiple ACL Profiles that are more extensive than the example described here, with different Profiles assigned to different paths/URLs throughout the protected application. Here‚Äôs a<a href=""https://docs.curiefense.io/console/document-editor/acl-profiles""> full explanation of ACL Profiles and their capabilities</a>.<br></p><p>In the example, you probably noticed that ACL Profile actions often result in the request being sent to the WAF for further evaluation. WAF processing occurs after ACL Profiles, as shown here:<br></p><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32c955ce12170b9892016_8LZDaeBU3Fu-JwJXe2fyn_rPdmqdRVjV776FojhA5hRCi1607QSljQCX5NWy7SaalcA6oDk4l1LIdsYgYui9_cIbr18eSH_hZbGBLgNctt0rgzfYsDf5UyugEZ4rMGJllv6a9ZKN.png"" width=""auto"" height=""auto"" loading=""auto""></div><figcaption><em>WAF evaluation occurs after ACL Profiles</em></figcaption></figure><p>The Curiefense WAF enforces a number of rulesets, and blocks requests which do not meet them. This includes a wide variety of protective mechanisms against attacks such as SQL injection, code/command injection, cross-site scripting, and so on.<br></p><p>In addition, custom rulesets can be defined for any combination of headers, cookies, and arguments. This includes content filtering: a request can be blocked if it contains certain content, or conversely if it <em>doesn‚Äôt</em> contain certain content. A later article will cover the Curiefense WAF in more detail.&nbsp;<br></p><p>Now it‚Äôs time to complete the diagram by adding the one remaining stage of processing.</p><h2>Rate Limiting</h2><figure class=""w-richtext-figure-type-image w-richtext-align-fullwidth"" style=""max-width:1600px""><div><img src=""https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32c94cb1bfc90e1f891c9_xowYh8ajZe7ixE0LQHI-aqgh6M9X6XXJXrvwqrN4GTIsWIh9UbCi_-Zm7Kkqo6QU2PxDFzk9zoywniNdEQhAtflQ1bD5Pkt1_rZ80-zSWPyvzQCd8CvaXT7IZIDPyV1y_nohX3Fg.png"" width=""auto"" height=""auto"" loading=""auto""></div><figcaption><em>Rate&nbsp;Limits are enforced before ACL&nbsp;Profiles</em></figcaption></figure><p>After tags are attached, but before ACL Profiles are evaluated, Curiefense enforces Rate Limits. These are rulesets which define the frequency and timing with which a traffic source is allowed to access a given resource.&nbsp;<br></p><p>This has many uses, including:</p><ul><li>Protecting login forms against credential stuffing and other brute-force attacks</li><li>Protecting checkout pages against payment card validation</li><li>Protecting sites against scraping</li><li>Protecting shopping pages (products, travel reservations, etc.) from inventory denial attacks<br></li></ul><p>Rate Limiting rules are straightforward to set up, but they are quite powerful in their capabilities. A later article will explore Curiefense‚Äôs Rate Limiting capabilities in more detail.</p><h2>Conclusion</h2><p>This has been an overview of Curiefense‚Äôs real-time traffic processing. The main takeaway is this: Curiefense operates according to an intuitive tagging system. Each incoming request receives a set of tags describing its characteristics, and then the tags are evaluated to determine the action that is taken.&nbsp;<br></p><p>There are many more capabilities of Curiefense that we didn‚Äôt have a chance to discuss above; they will be covered in future articles. Stay tuned!</p><p><br></p>","To filter HTTP traffic, Curiefense uses an intuitive tag-based system. It's flexible and powerful, but still straightforward to understand and use. Here's how it works. ",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32dcf78ac52d6491477a7_Traffic-CF-v1.0.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fb32dcf78ac52d6491477a7_Traffic-CF-v1.0.png,
How Curiefense Works,how-curiefense-works,603dd3b188409445e6274adc,603dd3b188409408b0274b23,Thu Nov 12 2020 21:51:27 GMT+0000 (Coordinated Universal Time),Thu Nov 12 2020 21:51:27 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>Curiefense represents a new approach to web security: traffic filtering done directly within the service mesh. Here‚Äôs how it works.</p><h2>A Curiefense Deployment</h2><p>In the diagram, <strong>User</strong> represents a source of traffic. This could be a person using a browser, a mobile application calling an API, a search engine spider seeking to index a site, or even a hostile bot attempting a vulnerability scan. Whatever its nature and motive, the User is trying to communicate with the <strong>Web Service.</strong> This represents the protected site, app, service, etc.<br></p><p>The Web Service is using Envoy as a sidecar. In turn, Envoy is using Curiefense as an HTTP filter. Thus, Curiefense can analyze all traffic attempting to pass through Envoy on its way to the Web Service, and can block hostile requests.<br></p><p>As it processes the incoming requests, the Curiefense instance pushes data to <strong>Metrics</strong> and <strong>Logs DB</strong>. Metrics is a store of traffic data and metrics that is made available to the <strong>Dashboard</strong> for visual display and reports. (By default, Prometheus metrics and Grafana dashboards are used, but other options can be used instead.) Logs DB is a comprehensive store of data (headers, payloads, tags, disposition, etc.) for all requests.&nbsp;<br></p><p><strong>Web UI</strong> is the web console for Curiefense users. It has two primary capabilities:</p><ul><li>It provides a visual interface for the traffic data in Logs DB. Users can query and see traffic details at any scale, whether to examine large tranches of traffic or to quickly drill down into individual requests. All requests are available here (not only the ones that were blocked); this allows users to understand their traffic streams, and how it is being handled.</li><li>The Web UI also provides editing capabilities for Curiefense‚Äôs configuration: its security rulesets, policies, and so on. When an admin uses the Web UI to update a configuration, it is pushed to the Config Server.<br></li></ul><p>The <strong>Config Server</strong> distributes configurations to all Curiefense instances. (More on this in a moment.) It receives updates and instructions from both the Web UI and a REST API, which isn‚Äôt shown explicitly in the diagram. Everything that can be done through the web console can also be done through the API, via curl and/or a cli tool.&nbsp;<br></p><p>Along with configuration updates from admins, Config Server also receives input from Curiefense‚Äôs adaptive mechanisms. The platform uses Machine Learning to update and refine its security posture as the threat environment changes. It does this by:</p><ul><li>Continually analyzing its metrics and traffic data to detect new or evolving threats.</li><li>Continually updating its security posture in response to its incoming <strong>Threat Intelligence Feeds</strong> (which contain IP reputation, threat signatures, and so on).&nbsp;</li><li>Constructing behavioral profiles of legitimate users for its protected Web Services. Traffic sources which deviate from these and attempt divergent behavior will be detected, flagged, and if the admin desires, automatically blocked.<br></li></ul><p>Whenever the Config Server updates a configuration, it pushes the data out to <strong>Cloud Storage</strong>. The Curiefense instance regularly polls Cloud Storage; if its defined configuration has changed, it pulls the new configuration and updates itself.&nbsp;<br></p><p>A typical service mesh will have many Web Services, many Envoy proxies, and many Curiefense instances, all of which can be served by one Cloud Storage bucket. Note too that a single Config Server can push changes to many Cloud Storage buckets. Thus, an admin can create multiple environments (e.g., prod/devops/qa), and has the ability to control them all from one central location.</p><h2>Summary</h2><p>That‚Äôs an overview of how Curiefense works. The important things to take away from this are as follows:</p><ul><li>Each Curiefense instance plugs directly into Envoy.</li><li>All traffic filtering occurs inside the service mesh. No third party processes the traffic, and no third party has access to it. Curiefense provides absolute privacy.</li><li>Curiefense‚Äôs security posture is built from administrative configurations, external threat feeds, internal analysis of the threat environment, and custom behavioral profiles.</li><li>Curiefense can be driven by UI, API, or both. Admins can set up and control multiple environments centrally or separately, as desired.&nbsp;<br></li></ul><p>In later articles, we‚Äôll take deeper dives into the various components of Curiefense, along with other topics such as threat detection.</p><p><br></p>",Curiefense represents a new approach to web security: traffic filtering done directly within the service mesh. Here‚Äôs how it works.,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fadae129b676cc8f669fb07_Main_diagram-01.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fadae129b676cc8f669fb07_Main_diagram-01.png,
Introducing Curiefense,introducing-curiefense,603dd3b188409445e6274adc,603dd3b18840942e45274b0f,Mon Nov 09 2020 17:56:04 GMT+0000 (Coordinated Universal Time),Wed Nov 11 2020 05:18:17 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>Curiefense is an open-source cloud-native application security platform. It offers protection for all forms of web traffic: sites, apps, services, and APIs.&nbsp;<br></p><p>Curiefense integrates security directly into modern service architectures. Traditionally, HTTP traffic filtering has been done by a separate (and usually external) product or service. Curiefense moves it inside the perimeter, and bakes it into the infrastructure itself‚Äîdirectly into Kubernetes containers, Istio service meshes, and more.&nbsp;<br></p><p>The platform has many aspects worth discussing. It is:</p><ul><li>An extension to <a href=""https://www.envoyproxy.io/"">Envoy</a>, the popular edge and service proxy.</li><li>An all-in-one web security solution.</li><li>A solution that runs inside your perimeter, ensuring absolute privacy for your users and customers.</li><li>An extensive and unified software suite made by developers, for developers.</li><li>An open source platform for the cloud-native community to build upon.</li></ul><h2>An Envoy extension</h2><p>Envoy is a proxy and communication bus with a large and growing number of uses in modern service architectures: edge gateways, service meshes, hybrid networking bridges, and more. The Envoy team continues to expand its capabilities, as seen in their recent announcement of the <a href=""https://blog.envoyproxy.io/envoy-proxy-on-windows-containers-193dffa13050"">Alpha version of Envoy Proxy on Windows Containers</a>.<br></p><p>Curiefense is integrated with Envoy, extending its capabilities to include web security. Anywhere that Envoy runs, traffic filtering can be added‚Äîwhether as an ingress gateway, sidecar or reverse proxy, load balancer, etc.&nbsp;</p><h2>An all-in-one web security solution</h2><p>Curiefense defends against a wide variety of attacks and threats: injection attacks, cross-site scripting, account takeovers, API abuse, and many more. It‚Äôs no longer necessary to assemble different security technologies (WAF, DDoS mitigation, bot management, UEBA based on Machine Learning, etc.) to get complete protection: Curiefense provides it all.</p><h2>A solution that runs inside your perimeter</h2><p>Traditional cloud security solutions run outside of the network on their own infrastructure. If you use one of these solutions, your traffic will be decrypted, processed, and possibly saved, on that external infrastructure. Worse, that external infrastructure is probably being shared with an unknown number of other organizations. This is <em>far</em> from ideal.<br></p><p>Reblaze (the company behind Curiefense) has, from its inception, used a different approach for its web security platform. Every Reblaze deployment runs in a unique VPC, dedicated to that particular customer. Thus, there are no shared environments or privacy issues. However, depending on the customer‚Äôs architecture, this can still require a few extra resources, such as a VM to run Reblaze.&nbsp;&nbsp;<br></p><p>Curiefense solves all of these issues and moves web security directly into your infrastructure. No external environments or outside resources are needed; everything happens within the perimeter.<br></p><p>This provides complete privacy: no traffic or data is decrypted outside your network. No third party processes it. No third party has access to it. And by eliminating external latency and the need for extra resources, Curiefense also provides the best performance possible.&nbsp;&nbsp;</p><h2>A suite made by developers, for developers</h2><p>Modern practices such as DevOps, immutable infrastructure, and others have transformed the workflows and productivity of many organizations. Unfortunately, many security solutions have not kept up. Often, CI/CD can be throttled by a frustrating inefficiency: every time a significant delivery occurs, a WAF (or other security component) must be manually retuned and reconfigured to protect the new app or API feature, or whatever.<br></p><p>Curiefense is developer-friendly from its foundations. It is fully controllable via its web console or via API. (For that matter, the UI itself uses the API.) It supports versioned configurations, multiple and branched environments, and more; everything you need to automate your web security and make it part of your pipeline.</p><h2>An open source platform</h2><p>Curiefense is available under Apache License Version 2.0.&nbsp;<br></p><p>Our desire is to benefit individuals and organizations, and most of all, the cloud native community itself. We are hopeful that the community will augment our (already extensive) roadmap for Curiefense by offering us their opinions, ideas, suggestions, and feedback, and help us make Curiefense a better tool for everyone.</p><p>‚Äç<br>For more about our vision for Curiefense, see the <a href=""https://www.curiefense.io/manifesto"">Manifesto</a>.</p>","Curiefense is a new open-source cloud-native application security platform. It integrates security directly into modern service architectures, and offers multiple benefits that were not previously available in this form.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fab730f54e5911ddcef4864_isometric_white_bg-06-06.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fab730f54e5911ddcef4864_isometric_white_bg-06-06.png,
Welcome to Curiefense,welcome,603dd3b188409445e6274adc,603dd3b18840944318274afc,Tue Nov 03 2020 18:52:57 GMT+0000 (Coordinated Universal Time),Sun Nov 29 2020 19:50:55 GMT+0000 (Coordinated Universal Time),Tue Mar 02 2021 06:06:37 GMT+0000 (Coordinated Universal Time),"<p>Paris / Tel Aviv<br></p><h3>Welcome to Curiefense<br></h3><p>Curiefense is a new open source application security platform, which protects sites, services, and APIs. It extends Envoy proxy to defend against a variety of threats, including SQL and command injection, cross site scripting (XSS), account takeovers (ATOs), application-layer DDoS, remote file inclusion (RFI), API abuse, and more.</p><p>By building it on top of <a href=""https://envoyproxy.io/"">Envoy</a>, we benefit from all of the advantages of Envoy, such as service discovery, HTTP/2 and gRPC support, and seamless integration into cloud native API gateway and service mesh deployments.</p><p>Curiefense inspects every request and analyzes it according to its security policies. Some of these are inherent, some are customized by the user, some are received from external threat feeds, and some are automatically generated and adapted as the threat environment evolves.</p><p>We started working on Curiefense in January this year (2020), because the range, frequency, and severity of cyberattacks is ever expanding. Attackers evolve rapidly, perfecting their tools and techniques, and demonstrating unprecedented capabilities; we realized collaboration is the most promising way to build a better, more comprehensive, transparent, scalable, and easy to use solution.</p><p>We are looking to collaborate with the vast communities of Envoy, Kubernetes, and other cloud native products to provide the ultimate cloud-native application security: a platform that is open, extensible, adaptive and evolving, while preserving total privacy for its users.</p><p>Throughout the year, we were fortunate to work closely with tech leadership at organizations such as Cisco, Google, and Lyft, while integrating their feedback across the design, implementation, API and packaging aspects of the project, as well as shaping its roadmap. This was indeed a humbling experience, for which we are grateful.<br>‚Äç</p><p><strong>Matt Klein, creator of Envoy, said:</strong></p><blockquote><em>I am extremely excited to see a cloud-native open source, API driven, WAF solution. <br><br>Security is of critical importance to modern cloud-native deployments, and open solutions have historically been lacking in this space. <br><br>Curiefense‚Äôs tight integration with Envoy and the rest of the cloud-native ecosystem will allow for rapid iteration and robust collaboration on this critical component. <br><br>I am very excited to see what the community can produce in aggregate when everyone is working together to evolve the status quo in OSS WAF solutions.</em><br></blockquote><p>‚Äç</p><p>Today we are releasing the first open source version of the platform, which has been tested at scale, and already operates in production. We are releasing it as open source and free; premium services will also be available as an additional layer. The free platform is fully operational, sufficient for most use cases, and offers more features and benefits than most other commercial solutions.</p><p>We named this project after the famous scientist Marie Curie. It began in intensive work sessions at Malakoff France, close to her home and laboratory in the outskirts of Paris, and is being released today on her birthday (November 7).<br></p><p>But this is just the beginning. We already have an extensive roadmap for additional capabilities, which will be available in our <a href=""https://github.com/curiefense"">Curiefense github</a> soon. We‚Äôre eager to receive feedback, opinions and ideas from the community, so we can make the platform even better than we could on our own.<br></p><p>Feel free to join our spam-free mailing list at <a href=""https://groups.google.com/a/curiefense.io/g/community"">https://groups.google.com/a/curiefense.io/g/community</a>, and follow us on <a href=""https://twitter.com/curiefense"">twitter</a> if you like.<br></p><p><strong>Tzury Bar Yochay</strong> and <strong>Philippe Biondi</strong> <br>co-creators</p><p><br></p><blockquote>Through my years at Cisco, Microsoft &amp; others, working with almost every enterprise company in the cloud technology space, there has been one absolute mandate that goes into every cloud product, platform, and infrastructure. That mandate has been in the area of security; there are no exceptions &amp; there are no excuses.&nbsp;</blockquote><blockquote>Security is constantly changing and evolving, therefore we must always be looking forward and be at the forefront of that evolution to ensure we are always ahead of what is out there. What Curiefense brings is that historical ability of Web Application Firewall to the new frontier within a microservices stack.&nbsp;</blockquote><blockquote>The ease of deploying an enterprise-grade WAF directly to a Kubernetes-based infrastructure brings that next level of capabilities to such a powerful platform &amp; community in Kubernetes. Combining Curiefense within our stack gives us better security for our API services, DDoS Protection, Biometric Analysis &amp; Real-Time Analytics to ensure we are putting our customers, their data &amp; their needs first &amp; always working to make sure we are doing everything we can to protect them.</blockquote><blockquote>As Marie Curie herself has been quoted, ""Nothing in life is to be feared, it is only to be understood. Now is the time to understand more, so that we may fear less.""<br></blockquote><blockquote><strong>Chris Ferreira<br>‚Äç</strong>Sr. Cloud Platform Architect | Sr. Technical Leader<br>Cisco</blockquote><p>‚Äç</p><p><br></p><blockquote>In the last 2 years there has been a significant rise in bot attacks globally across a wide range of attack vectors. To combat this internet reality noting that the majority of internet traffic is bot traffic, eCG is leveraging the Reblaze solution globally to protect our platforms which support over 280M online users.<br></blockquote><blockquote>Not only has Reblaze's solution been effective at blocking bad bot traffic, it also allows us to allow good bot traffic in a structured way to our sites.&nbsp; Additionally the Reblaze implementation process was simply superb with a well-coordinated support team.&nbsp;</blockquote><blockquote>‚ÄúAt eCG protection consumer data in priority #1, today I can sleep a bit easier at night knowing the Reblaze solution is there fighting bad bot traffic in defense of our sites and consumers‚Äù<br></blockquote><blockquote><strong>James Bynoe<br>‚Äç</strong>Head of Information Security &amp; Compliance<br>ebay classifieds groups</blockquote><p><br></p>","Welcome to Curiefense
Curiefense is a new application security platform, which protects sites, services, and APIs. It extends Envoy proxy to defend against a variety of threats, including SQL and command injection, cross site scripting (XSS), account takeovers (ATOs), application-layer DDoS, remote file inclusion (RFI), API abuse, and more.",https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fa719d426e380d6b3fa58ba_4_sec_layers-02.png,https://uploads-ssl.webflow.com/5fa1500e10bda4bfdcb1b209/5fa719d426e380d6b3fa58ba_4_sec_layers-02.png,
